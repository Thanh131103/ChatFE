{"ast":null,"code":"var _jsxFileName = \"/Users/huy8bit/Desktop/DRIVE/JOB/webchatFE/src/pages/Dashboard/Settings/ThemeImage.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport classnames from \"classnames\"; // interface\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst changeImage = id => {\n  const element = document.getElementById(`image-${id}`);\n\n  if (element) {\n    const image = window.getComputedStyle(element, null).getPropertyValue(\"background-image\");\n    const userChat = document.getElementById(\"user-chat\");\n\n    if (userChat) {\n      userChat.style.backgroundImage = image;\n    }\n  }\n};\n\nconst FormCheck = _ref => {\n  let {\n    image,\n    selected,\n    onChange\n  } = _ref;\n  const checked = selected && selected.id === image.id ? true : false;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"form-check\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      className: \"form-check-input theme-img\",\n      type: \"radio\",\n      name: \"bgimg-radio\",\n      id: image.id,\n      onChange: () => {\n        onChange(image);\n      },\n      checked: checked\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      className: \"form-check-label avatar-xs\",\n      htmlFor: image.id,\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        className: classnames(\"avatar-title\", \"rounded-circle\", \"theme-btn\", [image.pattern], [image.id]),\n        id: `image-${image.id}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n};\n\n_c = FormCheck;\n\nconst ThemeImage = _ref2 => {\n  _s();\n\n  let {\n    theme,\n    onChangeData\n  } = _ref2;\n  const [themeImages] = useState([{\n    id: \"bgimg-radio1\",\n    pattern: \"bg-pattern-1\"\n  }, {\n    id: \"bgimg-radio2\",\n    pattern: \"bg-pattern-2\"\n  }, {\n    id: \"bgimg-radio3\",\n    pattern: \"bg-pattern-3\"\n  }, {\n    id: \"bgimg-radio4\",\n    pattern: \"bg-pattern-4\"\n  }, {\n    id: \"bgimg-radio5\",\n    pattern: \"bg-pattern-5\"\n  }, {\n    id: \"bgimg-radio6\",\n    pattern: \"bg-pattern-6\"\n  }, {\n    id: \"bgimg-radio7\",\n    pattern: \"bg-pattern-7\"\n  }, {\n    id: \"bgimg-radio8\",\n    pattern: \"bg-pattern-8\"\n  }, {\n    id: \"bgimg-radio9\",\n    pattern: \"bg-pattern-9\"\n  }]);\n  const [selected, setSelected] = useState(null);\n\n  const onChangeThemeColor = image => {\n    setSelected(image);\n    onChangeData(\"theme\", { ...theme,\n      image: image.id\n    });\n  };\n\n  useEffect(() => {\n    if (theme && theme.image) {\n      const userTheme = themeImages.find(c => c.id === theme.image);\n\n      if (userTheme) {\n        setSelected(userTheme);\n      }\n    }\n  }, [theme, themeImages]);\n  useEffect(() => {\n    if (selected !== null) {\n      changeImage(selected.id);\n    }\n  }, [selected]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mt-4 pt-2\",\n    children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n      className: \"mb-3 font-size-11 text-muted text-uppercase\",\n      children: \"Choose Theme Image :\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"d-flex align-items-center flex-wrap gap-2 theme-btn-list theme-btn-list-img\",\n      children: (themeImages || []).map((image, key) => /*#__PURE__*/_jsxDEV(FormCheck, {\n        image: image,\n        selected: selected,\n        onChange: onChangeThemeColor\n      }, key, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 128,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ThemeImage, \"Q+fm8pjZUnHi4Vuqv7YxyaqN3fU=\");\n\n_c2 = ThemeImage;\nexport default ThemeImage;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"FormCheck\");\n$RefreshReg$(_c2, \"ThemeImage\");","map":{"version":3,"sources":["/Users/huy8bit/Desktop/DRIVE/JOB/webchatFE/src/pages/Dashboard/Settings/ThemeImage.tsx"],"names":["React","useEffect","useState","classnames","changeImage","id","element","document","getElementById","image","window","getComputedStyle","getPropertyValue","userChat","style","backgroundImage","FormCheck","selected","onChange","checked","pattern","ThemeImage","theme","onChangeData","themeImages","setSelected","onChangeThemeColor","userTheme","find","c","map","key"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport classnames from \"classnames\";\n\n// interface\nimport { ThemeTypes } from \"../../../data/settings\";\n\nconst changeImage = (id: string) => {\n  const element = document.getElementById(`image-${id}`);\n  if (element) {\n    const image = window\n      .getComputedStyle(element, null)\n      .getPropertyValue(\"background-image\");\n    const userChat = document.getElementById(\"user-chat\");\n    if (userChat) {\n      userChat.style.backgroundImage = image;\n    }\n  }\n};\n\ninterface ThemeImageTypes {\n  id: string;\n  pattern: string;\n}\n\ninterface FormCheckProps {\n  image: ThemeImageTypes;\n  selected: ThemeImageTypes | null;\n  onChange: (color: ThemeImageTypes) => void;\n}\nconst FormCheck = ({ image, selected, onChange }: FormCheckProps) => {\n  const checked = selected && selected.id === image.id ? true : false;\n  return (\n    <div className=\"form-check\">\n      <input\n        className=\"form-check-input theme-img\"\n        type=\"radio\"\n        name=\"bgimg-radio\"\n        id={image.id}\n        onChange={() => {\n          onChange(image);\n        }}\n        checked={checked}\n      />\n      <label className=\"form-check-label avatar-xs\" htmlFor={image.id}>\n        <span\n          className={classnames(\n            \"avatar-title\",\n            \"rounded-circle\",\n            \"theme-btn\",\n            [image.pattern],\n            [image.id]\n          )}\n          id={`image-${image.id}`}\n        ></span>\n      </label>\n    </div>\n  );\n};\n\ninterface ThemeImageProps {\n  theme: ThemeTypes;\n  onChangeData: (field: string, value: any) => void;\n}\n\nconst ThemeImage = ({ theme, onChangeData }: ThemeImageProps) => {\n  const [themeImages] = useState<ThemeImageTypes[]>([\n    {\n      id: \"bgimg-radio1\",\n      pattern: \"bg-pattern-1\",\n    },\n    {\n      id: \"bgimg-radio2\",\n      pattern: \"bg-pattern-2\",\n    },\n    {\n      id: \"bgimg-radio3\",\n      pattern: \"bg-pattern-3\",\n    },\n    {\n      id: \"bgimg-radio4\",\n      pattern: \"bg-pattern-4\",\n    },\n    {\n      id: \"bgimg-radio5\",\n      pattern: \"bg-pattern-5\",\n    },\n    {\n      id: \"bgimg-radio6\",\n      pattern: \"bg-pattern-6\",\n    },\n    {\n      id: \"bgimg-radio7\",\n      pattern: \"bg-pattern-7\",\n    },\n    {\n      id: \"bgimg-radio8\",\n      pattern: \"bg-pattern-8\",\n    },\n    {\n      id: \"bgimg-radio9\",\n      pattern: \"bg-pattern-9\",\n    },\n  ]);\n\n  const [selected, setSelected] = useState<ThemeImageTypes | null>(null);\n  const onChangeThemeColor = (image: ThemeImageTypes) => {\n    setSelected(image);\n    onChangeData(\"theme\", { ...theme, image: image.id });\n  };\n  useEffect(() => {\n    if (theme && theme.image) {\n      const userTheme = themeImages.find(\n        (c: ThemeImageTypes) => c.id === theme.image\n      );\n      if (userTheme) {\n        setSelected(userTheme);\n      }\n    }\n  }, [theme, themeImages]);\n\n  useEffect(() => {\n    if (selected !== null) {\n      changeImage(selected.id);\n    }\n  }, [selected]);\n\n  return (\n    <div className=\"mt-4 pt-2\">\n      <h5 className=\"mb-3 font-size-11 text-muted text-uppercase\">\n        Choose Theme Image :\n      </h5>\n      <div className=\"d-flex align-items-center flex-wrap gap-2 theme-btn-list theme-btn-list-img\">\n        {(themeImages || []).map((image: ThemeImageTypes, key: number) => (\n          <FormCheck\n            image={image}\n            key={key}\n            selected={selected}\n            onChange={onChangeThemeColor}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default ThemeImage;\n"]},"metadata":{},"sourceType":"module"}