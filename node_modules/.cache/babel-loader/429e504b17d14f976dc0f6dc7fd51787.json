{"ast":null,"code":"import { createStore, applyMiddleware, compose } from \"redux\";\nimport createSagaMiddleware from \"redux-saga\";\nimport reducers from \"./reducers\";\nimport rootSaga from \"./sagas\";\nconst sagaMiddleware = createSagaMiddleware();\nconst middlewares = [sagaMiddleware];\nlet store;\nexport function configureStore(initialState) {\n  const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n  store = createStore(reducers, initialState, composeEnhancers(applyMiddleware(...middlewares)));\n  sagaMiddleware.run(rootSaga);\n  return store;\n} // Infer the `RootState` and `AppDispatch` types from the store itself","map":{"version":3,"sources":["/Users/huy8bit/Desktop/DRIVE/JOB/webchatFE/src/redux/store.ts"],"names":["createStore","applyMiddleware","compose","createSagaMiddleware","reducers","rootSaga","sagaMiddleware","middlewares","store","configureStore","initialState","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","run"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,EAAuCC,OAAvC,QAAsD,OAAtD;AACA,OAAOC,oBAAP,MAAiC,YAAjC;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,QAAP,MAAqB,SAArB;AAEA,MAAMC,cAAc,GAAGH,oBAAoB,EAA3C;AACA,MAAMI,WAAW,GAAG,CAACD,cAAD,CAApB;AAQA,IAAIE,KAAJ;AACA,OAAO,SAASC,cAAT,CAAwBC,YAAxB,EAA2C;AAChD,QAAMC,gBAAgB,GACpBC,MAAM,CAACC,oCAAP,IAA+CX,OADjD;AAGAM,EAAAA,KAAK,GAAGR,WAAW,CACjBI,QADiB,EAEjBM,YAFiB,EAGjBC,gBAAgB,CAACV,eAAe,CAAC,GAAGM,WAAJ,CAAhB,CAHC,CAAnB;AAKAD,EAAAA,cAAc,CAACQ,GAAf,CAAmBT,QAAnB;AACA,SAAOG,KAAP;AACD,C,CAED","sourcesContent":["import { createStore, applyMiddleware, compose } from \"redux\";\nimport createSagaMiddleware from \"redux-saga\";\nimport reducers from \"./reducers\";\nimport rootSaga from \"./sagas\";\n\nconst sagaMiddleware = createSagaMiddleware();\nconst middlewares = [sagaMiddleware];\n\ndeclare global {\n  interface Window {\n    __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: typeof compose;\n  }\n}\n\nlet store: any;\nexport function configureStore(initialState: any) {\n  const composeEnhancers =\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\n  store = createStore(\n    reducers,\n    initialState,\n    composeEnhancers(applyMiddleware(...middlewares))\n  );\n  sagaMiddleware.run(rootSaga);\n  return store;\n}\n\n// Infer the `RootState` and `AppDispatch` types from the store itself\nexport type RootState = ReturnType<typeof store.getState>;\n\nexport type AppDispatch = typeof store.dispatch;\n"]},"metadata":{},"sourceType":"module"}