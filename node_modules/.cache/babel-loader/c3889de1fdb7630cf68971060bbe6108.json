{"ast":null,"code":"var _jsxFileName = \"/Users/huy8bit/Desktop/DRIVE/JOB/webchatFE/src/pages/Dashboard/Settings/ThemeColor.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport classnames from \"classnames\"; // interface\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst changeColor = id => {\n  const element = document.getElementById(`color-${id}`);\n\n  if (element) {\n    const color = window.getComputedStyle(element, null).getPropertyValue(\"background-color\");\n    const userChatOverlay = document.getElementById(\"user-chat-overlay\");\n\n    if (userChatOverlay) {\n      userChatOverlay.style.background = color;\n      const rgbColor = color.substring(color.indexOf(\"(\") + 1, color.indexOf(\")\"));\n      document.documentElement.style.setProperty(\"--bs-primary-rgb\", rgbColor);\n    }\n  }\n};\n\nconst FormCheck = _ref => {\n  let {\n    color,\n    selected,\n    onChange\n  } = _ref;\n  const checked = selected && selected.id === color.id ? true : false;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"form-check\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      className: \"form-check-input theme-color\",\n      type: \"radio\",\n      name: \"bgcolor-radio\",\n      id: color.id,\n      onChange: () => {\n        onChange(color);\n      },\n      checked: checked\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      className: \"form-check-label avatar-xs\",\n      htmlFor: color.id,\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        className: classnames(\"avatar-title\", \"rounded-circle\", \"theme-btn\", [color.color], [color.id]),\n        id: `color-${color.id}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n};\n\n_c = FormCheck;\n\nconst ThemeColor = _ref2 => {\n  _s();\n\n  let {\n    theme,\n    onChangeData\n  } = _ref2;\n  const [themeColors] = useState([{\n    id: \"bgcolor-radio1\",\n    color: \"bg-blue\"\n  }, {\n    id: \"bgcolor-radio2\",\n    color: \"bg-info\"\n  }, {\n    id: \"bgcolor-radio3\",\n    color: \"bg-purple\"\n  }, {\n    id: \"bgcolor-radio4\",\n    color: \"bg-pink\"\n  }, {\n    id: \"bgcolor-radio5\",\n    color: \"bg-danger\"\n  }, {\n    id: \"bgcolor-radio6\",\n    color: \"bg-secondary\"\n  }]);\n  const [selected, setSelected] = useState(null);\n\n  const onChangeThemeColor = color => {\n    setSelected(color);\n    onChangeData(\"theme\", { ...theme,\n      color: color.id\n    });\n  };\n\n  useEffect(() => {\n    if (theme && theme.color) {\n      const userTheme = themeColors.find(c => c.id === theme.color);\n\n      if (userTheme) {\n        setSelected(userTheme);\n      }\n    }\n  }, [theme, themeColors]);\n  useEffect(() => {\n    if (selected !== null) {\n      changeColor(selected.id);\n    }\n  }, [selected]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n      className: \"mb-3 font-size-11 text-muted text-uppercase\",\n      children: \"Choose Theme Color :\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"d-flex align-items-center flex-wrap gap-2 theme-btn-list theme-color-list\",\n      children: (themeColors || []).map((color, key) => /*#__PURE__*/_jsxDEV(FormCheck, {\n        color: color,\n        selected: selected,\n        onChange: onChangeThemeColor\n      }, key, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 120,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ThemeColor, \"g/KeHbRpKWdcYCwsTSB/DlzdyOY=\");\n\n_c2 = ThemeColor;\nexport default ThemeColor;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"FormCheck\");\n$RefreshReg$(_c2, \"ThemeColor\");","map":{"version":3,"sources":["/Users/huy8bit/Desktop/DRIVE/JOB/webchatFE/src/pages/Dashboard/Settings/ThemeColor.tsx"],"names":["React","useEffect","useState","classnames","changeColor","id","element","document","getElementById","color","window","getComputedStyle","getPropertyValue","userChatOverlay","style","background","rgbColor","substring","indexOf","documentElement","setProperty","FormCheck","selected","onChange","checked","ThemeColor","theme","onChangeData","themeColors","setSelected","onChangeThemeColor","userTheme","find","c","map","key"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,UAAP,MAAuB,YAAvB,C,CAEA;;;;AAGA,MAAMC,WAAW,GAAIC,EAAD,IAAgB;AAClC,QAAMC,OAAO,GAAGC,QAAQ,CAACC,cAAT,CAAyB,SAAQH,EAAG,EAApC,CAAhB;;AACA,MAAIC,OAAJ,EAAa;AACX,UAAMG,KAAK,GAAGC,MAAM,CACjBC,gBADW,CACML,OADN,EACe,IADf,EAEXM,gBAFW,CAEM,kBAFN,CAAd;AAGA,UAAMC,eAAe,GAAGN,QAAQ,CAACC,cAAT,CAAwB,mBAAxB,CAAxB;;AACA,QAAIK,eAAJ,EAAqB;AACnBA,MAAAA,eAAe,CAACC,KAAhB,CAAsBC,UAAtB,GAAmCN,KAAnC;AACA,YAAMO,QAAQ,GAAGP,KAAK,CAACQ,SAAN,CACfR,KAAK,CAACS,OAAN,CAAc,GAAd,IAAqB,CADN,EAEfT,KAAK,CAACS,OAAN,CAAc,GAAd,CAFe,CAAjB;AAIAX,MAAAA,QAAQ,CAACY,eAAT,CAAyBL,KAAzB,CAA+BM,WAA/B,CAA2C,kBAA3C,EAA+DJ,QAA/D;AACD;AACF;AACF,CAhBD;;AA4BA,MAAMK,SAAS,GAAG,QAAmD;AAAA,MAAlD;AAAEZ,IAAAA,KAAF;AAASa,IAAAA,QAAT;AAAmBC,IAAAA;AAAnB,GAAkD;AACnE,QAAMC,OAAO,GAAGF,QAAQ,IAAIA,QAAQ,CAACjB,EAAT,KAAgBI,KAAK,CAACJ,EAAlC,GAAuC,IAAvC,GAA8C,KAA9D;AACA,sBACE;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA,4BACE;AACE,MAAA,SAAS,EAAC,8BADZ;AAEE,MAAA,IAAI,EAAC,OAFP;AAGE,MAAA,IAAI,EAAC,eAHP;AAIE,MAAA,EAAE,EAAEI,KAAK,CAACJ,EAJZ;AAKE,MAAA,QAAQ,EAAE,MAAM;AACdkB,QAAAA,QAAQ,CAACd,KAAD,CAAR;AACD,OAPH;AAQE,MAAA,OAAO,EAAEe;AARX;AAAA;AAAA;AAAA;AAAA,YADF,eAWE;AAAO,MAAA,SAAS,EAAC,4BAAjB;AAA8C,MAAA,OAAO,EAAEf,KAAK,CAACJ,EAA7D;AAAA,6BACE;AACE,QAAA,SAAS,EAAEF,UAAU,CACnB,cADmB,EAEnB,gBAFmB,EAGnB,WAHmB,EAInB,CAACM,KAAK,CAACA,KAAP,CAJmB,EAKnB,CAACA,KAAK,CAACJ,EAAP,CALmB,CADvB;AAQE,QAAA,EAAE,EAAG,SAAQI,KAAK,CAACJ,EAAG;AARxB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAXF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA0BD,CA5BD;;KAAMgB,S;;AAmCN,MAAMI,UAAU,GAAG,SAA8C;AAAA;;AAAA,MAA7C;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT,GAA6C;AAC/D,QAAM,CAACC,WAAD,IAAgB1B,QAAQ,CAAoB,CAChD;AACEG,IAAAA,EAAE,EAAE,gBADN;AAEEI,IAAAA,KAAK,EAAE;AAFT,GADgD,EAKhD;AACEJ,IAAAA,EAAE,EAAE,gBADN;AAEEI,IAAAA,KAAK,EAAE;AAFT,GALgD,EAShD;AACEJ,IAAAA,EAAE,EAAE,gBADN;AAEEI,IAAAA,KAAK,EAAE;AAFT,GATgD,EAahD;AACEJ,IAAAA,EAAE,EAAE,gBADN;AAEEI,IAAAA,KAAK,EAAE;AAFT,GAbgD,EAiBhD;AACEJ,IAAAA,EAAE,EAAE,gBADN;AAEEI,IAAAA,KAAK,EAAE;AAFT,GAjBgD,EAqBhD;AACEJ,IAAAA,EAAE,EAAE,gBADN;AAEEI,IAAAA,KAAK,EAAE;AAFT,GArBgD,CAApB,CAA9B;AA0BA,QAAM,CAACa,QAAD,EAAWO,WAAX,IAA0B3B,QAAQ,CAAyB,IAAzB,CAAxC;;AACA,QAAM4B,kBAAkB,GAAIrB,KAAD,IAA4B;AACrDoB,IAAAA,WAAW,CAACpB,KAAD,CAAX;AACAkB,IAAAA,YAAY,CAAC,OAAD,EAAU,EAAE,GAAGD,KAAL;AAAYjB,MAAAA,KAAK,EAAEA,KAAK,CAACJ;AAAzB,KAAV,CAAZ;AACD,GAHD;;AAIAJ,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIyB,KAAK,IAAIA,KAAK,CAACjB,KAAnB,EAA0B;AACxB,YAAMsB,SAAS,GAAGH,WAAW,CAACI,IAAZ,CACfC,CAAD,IAAwBA,CAAC,CAAC5B,EAAF,KAASqB,KAAK,CAACjB,KADvB,CAAlB;;AAGA,UAAIsB,SAAJ,EAAe;AACbF,QAAAA,WAAW,CAACE,SAAD,CAAX;AACD;AACF;AACF,GATQ,EASN,CAACL,KAAD,EAAQE,WAAR,CATM,CAAT;AAWA3B,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIqB,QAAQ,KAAK,IAAjB,EAAuB;AACrBlB,MAAAA,WAAW,CAACkB,QAAQ,CAACjB,EAAV,CAAX;AACD;AACF,GAJQ,EAIN,CAACiB,QAAD,CAJM,CAAT;AAMA,sBACE;AAAA,4BACE;AAAI,MAAA,SAAS,EAAC,6CAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAIE;AAAK,MAAA,SAAS,EAAC,2EAAf;AAAA,gBACG,CAACM,WAAW,IAAI,EAAhB,EAAoBM,GAApB,CAAwB,CAACzB,KAAD,EAAyB0B,GAAzB,kBACvB,QAAC,SAAD;AACE,QAAA,KAAK,EAAE1B,KADT;AAGE,QAAA,QAAQ,EAAEa,QAHZ;AAIE,QAAA,QAAQ,EAAEQ;AAJZ,SAEOK,GAFP;AAAA;AAAA;AAAA;AAAA,cADD;AADH;AAAA;AAAA;AAAA;AAAA,YAJF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAiBD,CAlED;;GAAMV,U;;MAAAA,U;AAoEN,eAAeA,UAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport classnames from \"classnames\";\n\n// interface\nimport { ThemeTypes } from \"../../../data/settings\";\n\nconst changeColor = (id: string) => {\n  const element = document.getElementById(`color-${id}`);\n  if (element) {\n    const color = window\n      .getComputedStyle(element, null)\n      .getPropertyValue(\"background-color\");\n    const userChatOverlay = document.getElementById(\"user-chat-overlay\");\n    if (userChatOverlay) {\n      userChatOverlay.style.background = color;\n      const rgbColor = color.substring(\n        color.indexOf(\"(\") + 1,\n        color.indexOf(\")\")\n      );\n      document.documentElement.style.setProperty(\"--bs-primary-rgb\", rgbColor);\n    }\n  }\n};\n\ninterface ThemeColorTypes {\n  id: string;\n  color: string;\n}\n\ninterface FormCheckProps {\n  color: ThemeColorTypes;\n  selected: ThemeColorTypes | null;\n  onChange: (color: ThemeColorTypes) => void;\n}\nconst FormCheck = ({ color, selected, onChange }: FormCheckProps) => {\n  const checked = selected && selected.id === color.id ? true : false;\n  return (\n    <div className=\"form-check\">\n      <input\n        className=\"form-check-input theme-color\"\n        type=\"radio\"\n        name=\"bgcolor-radio\"\n        id={color.id}\n        onChange={() => {\n          onChange(color);\n        }}\n        checked={checked}\n      />\n      <label className=\"form-check-label avatar-xs\" htmlFor={color.id}>\n        <span\n          className={classnames(\n            \"avatar-title\",\n            \"rounded-circle\",\n            \"theme-btn\",\n            [color.color],\n            [color.id]\n          )}\n          id={`color-${color.id}`}\n        ></span>\n      </label>\n    </div>\n  );\n};\n\ninterface ThemeColorProps {\n  theme: ThemeTypes;\n  onChangeData: (field: string, value: any) => void;\n}\n\nconst ThemeColor = ({ theme, onChangeData }: ThemeColorProps) => {\n  const [themeColors] = useState<ThemeColorTypes[]>([\n    {\n      id: \"bgcolor-radio1\",\n      color: \"bg-blue\",\n    },\n    {\n      id: \"bgcolor-radio2\",\n      color: \"bg-info\",\n    },\n    {\n      id: \"bgcolor-radio3\",\n      color: \"bg-purple\",\n    },\n    {\n      id: \"bgcolor-radio4\",\n      color: \"bg-pink\",\n    },\n    {\n      id: \"bgcolor-radio5\",\n      color: \"bg-danger\",\n    },\n    {\n      id: \"bgcolor-radio6\",\n      color: \"bg-secondary\",\n    },\n  ]);\n  const [selected, setSelected] = useState<ThemeColorTypes | null>(null);\n  const onChangeThemeColor = (color: ThemeColorTypes) => {\n    setSelected(color);\n    onChangeData(\"theme\", { ...theme, color: color.id });\n  };\n  useEffect(() => {\n    if (theme && theme.color) {\n      const userTheme = themeColors.find(\n        (c: ThemeColorTypes) => c.id === theme.color\n      );\n      if (userTheme) {\n        setSelected(userTheme);\n      }\n    }\n  }, [theme, themeColors]);\n\n  useEffect(() => {\n    if (selected !== null) {\n      changeColor(selected.id);\n    }\n  }, [selected]);\n\n  return (\n    <div>\n      <h5 className=\"mb-3 font-size-11 text-muted text-uppercase\">\n        Choose Theme Color :\n      </h5>\n      <div className=\"d-flex align-items-center flex-wrap gap-2 theme-btn-list theme-color-list\">\n        {(themeColors || []).map((color: ThemeColorTypes, key: number) => (\n          <FormCheck\n            color={color}\n            key={key}\n            selected={selected}\n            onChange={onChangeThemeColor}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default ThemeColor;\n"]},"metadata":{},"sourceType":"module"}