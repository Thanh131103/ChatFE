{"ast":null,"code":"var _jsxFileName = \"/Users/huy8bit/Desktop/DRIVE/JOB/webchatFE/src/pages/Dashboard/Contacts/index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\"; // hooks\n\nimport { useRedux } from \"../../../hooks/index\"; // components\n\nimport Loader from \"../../../components/Loader\";\nimport AppSimpleBar from \"../../../components/AppSimpleBar\";\nimport InviteContactModal from \"../../../components/InviteContactModal\";\nimport EmptyStateResult from \"../../../components/EmptyStateResult\";\nimport ListHeader from \"./ListHeader\";\nimport Contact from \"./Contact\"; // actions\n\nimport { getContacts, inviteContact, resetContacts, getChannelDetails, getChatUserDetails, getChatUserConversations, changeSelectedChat } from \"../../../redux/actions\"; //utils\n\nimport { divideByKey } from \"../../../utils\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Index = props => {\n  _s();\n\n  // global store\n  const {\n    dispatch,\n    useAppSelector\n  } = useRedux();\n  const {\n    contactsList,\n    getContactsLoading,\n    isContactInvited\n  } = useAppSelector(state => ({\n    contactsList: state.Contacts.contacts,\n    getContactsLoading: state.Contacts.getContactsLoading,\n    isContactInvited: state.Contacts.isContactInvited\n  }));\n  /*\n  get contacts\n  */\n\n  useEffect(() => {\n    dispatch(getContacts());\n  }, [dispatch]);\n  const [contacts, setContacts] = useState([]);\n  const [contactsData, setContactsData] = useState([]);\n  useEffect(() => {\n    if (contactsList.length > 0) {\n      setContacts(contactsList);\n    }\n  }, [contactsList]);\n  useEffect(() => {\n    if (contacts.length > 0) {\n      const formattedContacts = divideByKey(\"firstName\", contacts);\n      setContactsData(formattedContacts);\n    }\n  }, [contacts]);\n  /*\n  add contact modal handeling\n  */\n\n  const [isOpen, setIsOpen] = useState(false);\n\n  const openModal = () => {\n    setIsOpen(true);\n  };\n\n  const closeModal = () => {\n    setIsOpen(false);\n  };\n  /*\n  onInvite handeling\n  */\n\n\n  const onInviteContact = data => {\n    dispatch(inviteContact(data));\n  };\n\n  useEffect(() => {\n    if (isContactInvited) {\n      setIsOpen(false);\n      setTimeout(() => {\n        dispatch(resetContacts(\"isContactInvited\", false));\n      }, 1000);\n    }\n  }, [dispatch, isContactInvited]);\n  /*\n  contact search\n  */\n\n  const [search, setSearch] = useState(\"\");\n\n  const onChangeSearch = value => {\n    setSearch(value);\n    let modifiedContacts = [...contactsList];\n    let filteredContacts = (modifiedContacts || []).filter(c => c[\"firstName\"].toLowerCase().includes(value.toLowerCase()));\n    setContacts(filteredContacts);\n  };\n\n  const totalC = (contacts || []).length;\n\n  const onSelectChat = (id, isChannel) => {\n    if (isChannel) {\n      dispatch(getChannelDetails(id));\n    } else {\n      dispatch(getChatUserDetails(id));\n    }\n\n    dispatch(getChatUserConversations(id));\n    dispatch(changeSelectedChat(id));\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"position-relative\",\n      children: [getContactsLoading && /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 32\n      }, this), /*#__PURE__*/_jsxDEV(ListHeader, {\n        search: search,\n        onChangeSearch: onChangeSearch,\n        openModal: openModal\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(AppSimpleBar, {\n        className: \"chat-message-list chat-group-list\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: totalC === 0 ? /*#__PURE__*/_jsxDEV(EmptyStateResult, {\n            searchedText: search\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 15\n          }, this) : (contactsData || []).map((letterContacts, key) => /*#__PURE__*/_jsxDEV(Contact, {\n            letterContacts: letterContacts,\n            index: key,\n            onSelectChat: onSelectChat\n          }, key, false, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 19\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(InviteContactModal, {\n      isOpen: isOpen,\n      onClose: closeModal,\n      onInvite: onInviteContact\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Index, \"cB8LStBnav159nSEqqFNckD5UYI=\", true, function () {\n  return [useRedux];\n});\n\n_c = Index;\nexport default Index;\n\nvar _c;\n\n$RefreshReg$(_c, \"Index\");","map":{"version":3,"sources":["/Users/huy8bit/Desktop/DRIVE/JOB/webchatFE/src/pages/Dashboard/Contacts/index.tsx"],"names":["React","useEffect","useState","useRedux","Loader","AppSimpleBar","InviteContactModal","EmptyStateResult","ListHeader","Contact","getContacts","inviteContact","resetContacts","getChannelDetails","getChatUserDetails","getChatUserConversations","changeSelectedChat","divideByKey","Index","props","dispatch","useAppSelector","contactsList","getContactsLoading","isContactInvited","state","Contacts","contacts","setContacts","contactsData","setContactsData","length","formattedContacts","isOpen","setIsOpen","openModal","closeModal","onInviteContact","data","setTimeout","search","setSearch","onChangeSearch","value","modifiedContacts","filteredContacts","filter","c","toLowerCase","includes","totalC","onSelectChat","id","isChannel","map","letterContacts","key"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C,C,CAEA;;AACA,SAASC,QAAT,QAAyB,sBAAzB,C,CAEA;;AACA,OAAOC,MAAP,MAAmB,4BAAnB;AACA,OAAOC,YAAP,MAAyB,kCAAzB;AACA,OAAOC,kBAAP,MAA+B,wCAA/B;AACA,OAAOC,gBAAP,MAA6B,sCAA7B;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,OAAP,MAAoB,WAApB,C,CAEA;;AACA,SACEC,WADF,EAEEC,aAFF,EAGEC,aAHF,EAIEC,iBAJF,EAKEC,kBALF,EAMEC,wBANF,EAOEC,kBAPF,QAQO,wBARP,C,CAUA;;AACA,SAASC,WAAT,QAAoD,gBAApD;;;;AAIA,MAAMC,KAAK,GAAIC,KAAD,IAAuB;AAAA;;AACnC;AACA,QAAM;AAAEC,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,MAA+BlB,QAAQ,EAA7C;AAEA,QAAM;AAAEmB,IAAAA,YAAF;AAAgBC,IAAAA,kBAAhB;AAAoCC,IAAAA;AAApC,MAAyDH,cAAc,CAC3EI,KAAK,KAAK;AACRH,IAAAA,YAAY,EAAEG,KAAK,CAACC,QAAN,CAAeC,QADrB;AAERJ,IAAAA,kBAAkB,EAAEE,KAAK,CAACC,QAAN,CAAeH,kBAF3B;AAGRC,IAAAA,gBAAgB,EAAEC,KAAK,CAACC,QAAN,CAAeF;AAHzB,GAAL,CADsE,CAA7E;AAQA;AACF;AACA;;AACEvB,EAAAA,SAAS,CAAC,MAAM;AACdmB,IAAAA,QAAQ,CAACV,WAAW,EAAZ,CAAR;AACD,GAFQ,EAEN,CAACU,QAAD,CAFM,CAAT;AAIA,QAAM,CAACO,QAAD,EAAWC,WAAX,IAA0B1B,QAAQ,CAAa,EAAb,CAAxC;AACA,QAAM,CAAC2B,YAAD,EAAeC,eAAf,IAAkC5B,QAAQ,CAAa,EAAb,CAAhD;AACAD,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIqB,YAAY,CAACS,MAAb,GAAsB,CAA1B,EAA6B;AAC3BH,MAAAA,WAAW,CAACN,YAAD,CAAX;AACD;AACF,GAJQ,EAIN,CAACA,YAAD,CAJM,CAAT;AAMArB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI0B,QAAQ,CAACI,MAAT,GAAkB,CAAtB,EAAyB;AACvB,YAAMC,iBAAiB,GAAGf,WAAW,CAAC,WAAD,EAAcU,QAAd,CAArC;AACAG,MAAAA,eAAe,CAACE,iBAAD,CAAf;AACD;AACF,GALQ,EAKN,CAACL,QAAD,CALM,CAAT;AAOA;AACF;AACA;;AACE,QAAM,CAACM,MAAD,EAASC,SAAT,IAAsBhC,QAAQ,CAAU,KAAV,CAApC;;AACA,QAAMiC,SAAS,GAAG,MAAM;AACtBD,IAAAA,SAAS,CAAC,IAAD,CAAT;AACD,GAFD;;AAGA,QAAME,UAAU,GAAG,MAAM;AACvBF,IAAAA,SAAS,CAAC,KAAD,CAAT;AACD,GAFD;AAIA;AACF;AACA;;;AACE,QAAMG,eAAe,GAAIC,IAAD,IAAe;AACrClB,IAAAA,QAAQ,CAACT,aAAa,CAAC2B,IAAD,CAAd,CAAR;AACD,GAFD;;AAGArC,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIuB,gBAAJ,EAAsB;AACpBU,MAAAA,SAAS,CAAC,KAAD,CAAT;AACAK,MAAAA,UAAU,CAAC,MAAM;AACfnB,QAAAA,QAAQ,CAACR,aAAa,CAAC,kBAAD,EAAqB,KAArB,CAAd,CAAR;AACD,OAFS,EAEP,IAFO,CAAV;AAGD;AACF,GAPQ,EAON,CAACQ,QAAD,EAAWI,gBAAX,CAPM,CAAT;AASA;AACF;AACA;;AACE,QAAM,CAACgB,MAAD,EAASC,SAAT,IAAsBvC,QAAQ,CAAC,EAAD,CAApC;;AACA,QAAMwC,cAAc,GAAIC,KAAD,IAAmB;AACxCF,IAAAA,SAAS,CAACE,KAAD,CAAT;AACA,QAAIC,gBAAgB,GAAG,CAAC,GAAGtB,YAAJ,CAAvB;AACA,QAAIuB,gBAAgB,GAAG,CAACD,gBAAgB,IAAI,EAArB,EAAyBE,MAAzB,CAAiCC,CAAD,IACrDA,CAAC,CAAC,WAAD,CAAD,CAAeC,WAAf,GAA6BC,QAA7B,CAAsCN,KAAK,CAACK,WAAN,EAAtC,CADqB,CAAvB;AAGApB,IAAAA,WAAW,CAACiB,gBAAD,CAAX;AACD,GAPD;;AASA,QAAMK,MAAM,GAAG,CAACvB,QAAQ,IAAI,EAAb,EAAiBI,MAAhC;;AACA,QAAMoB,YAAY,GAAG,CAACC,EAAD,EAAsBC,SAAtB,KAA8C;AACjE,QAAIA,SAAJ,EAAe;AACbjC,MAAAA,QAAQ,CAACP,iBAAiB,CAACuC,EAAD,CAAlB,CAAR;AACD,KAFD,MAEO;AACLhC,MAAAA,QAAQ,CAACN,kBAAkB,CAACsC,EAAD,CAAnB,CAAR;AACD;;AACDhC,IAAAA,QAAQ,CAACL,wBAAwB,CAACqC,EAAD,CAAzB,CAAR;AACAhC,IAAAA,QAAQ,CAACJ,kBAAkB,CAACoC,EAAD,CAAnB,CAAR;AACD,GARD;;AAUA,sBACE;AAAA,4BACE;AAAK,MAAA,SAAS,EAAC,mBAAf;AAAA,iBACG7B,kBAAkB,iBAAI,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,cADzB,eAEE,QAAC,UAAD;AACE,QAAA,MAAM,EAAEiB,MADV;AAEE,QAAA,cAAc,EAAEE,cAFlB;AAGE,QAAA,SAAS,EAAEP;AAHb;AAAA;AAAA;AAAA;AAAA,cAFF,eAQE,QAAC,YAAD;AAAc,QAAA,SAAS,EAAC,mCAAxB;AAAA,+BACE;AAAA,oBACGe,MAAM,KAAK,CAAX,gBACC,QAAC,gBAAD;AAAkB,YAAA,YAAY,EAAEV;AAAhC;AAAA;AAAA;AAAA;AAAA,kBADD,GAGC,CAACX,YAAY,IAAI,EAAjB,EAAqByB,GAArB,CACE,CAACC,cAAD,EAAyCC,GAAzC,kBACE,QAAC,OAAD;AACE,YAAA,cAAc,EAAED,cADlB;AAGE,YAAA,KAAK,EAAEC,GAHT;AAIE,YAAA,YAAY,EAAEL;AAJhB,aAEOK,GAFP;AAAA;AAAA;AAAA;AAAA,kBAFJ;AAJJ;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cARF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eA4BE,QAAC,kBAAD;AACE,MAAA,MAAM,EAAEvB,MADV;AAEE,MAAA,OAAO,EAAEG,UAFX;AAGE,MAAA,QAAQ,EAAEC;AAHZ;AAAA;AAAA;AAAA;AAAA,YA5BF;AAAA,kBADF;AAoCD,CAxHD;;GAAMnB,K;UAEiCf,Q;;;KAFjCe,K;AA0HN,eAAeA,KAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\n\n// hooks\nimport { useRedux } from \"../../../hooks/index\";\n\n// components\nimport Loader from \"../../../components/Loader\";\nimport AppSimpleBar from \"../../../components/AppSimpleBar\";\nimport InviteContactModal from \"../../../components/InviteContactModal\";\nimport EmptyStateResult from \"../../../components/EmptyStateResult\";\nimport ListHeader from \"./ListHeader\";\nimport Contact from \"./Contact\";\n\n// actions\nimport {\n  getContacts,\n  inviteContact,\n  resetContacts,\n  getChannelDetails,\n  getChatUserDetails,\n  getChatUserConversations,\n  changeSelectedChat,\n} from \"../../../redux/actions\";\n\n//utils\nimport { divideByKey, DivideByKeyResultTypes } from \"../../../utils\";\n\ninterface IndexProps {}\n\nconst Index = (props: IndexProps) => {\n  // global store\n  const { dispatch, useAppSelector } = useRedux();\n\n  const { contactsList, getContactsLoading, isContactInvited } = useAppSelector(\n    state => ({\n      contactsList: state.Contacts.contacts,\n      getContactsLoading: state.Contacts.getContactsLoading,\n      isContactInvited: state.Contacts.isContactInvited,\n    })\n  );\n\n  /*\n  get contacts\n  */\n  useEffect(() => {\n    dispatch(getContacts());\n  }, [dispatch]);\n\n  const [contacts, setContacts] = useState<Array<any>>([]);\n  const [contactsData, setContactsData] = useState<Array<any>>([]);\n  useEffect(() => {\n    if (contactsList.length > 0) {\n      setContacts(contactsList);\n    }\n  }, [contactsList]);\n\n  useEffect(() => {\n    if (contacts.length > 0) {\n      const formattedContacts = divideByKey(\"firstName\", contacts);\n      setContactsData(formattedContacts);\n    }\n  }, [contacts]);\n\n  /*\n  add contact modal handeling\n  */\n  const [isOpen, setIsOpen] = useState<boolean>(false);\n  const openModal = () => {\n    setIsOpen(true);\n  };\n  const closeModal = () => {\n    setIsOpen(false);\n  };\n\n  /*\n  onInvite handeling\n  */\n  const onInviteContact = (data: any) => {\n    dispatch(inviteContact(data));\n  };\n  useEffect(() => {\n    if (isContactInvited) {\n      setIsOpen(false);\n      setTimeout(() => {\n        dispatch(resetContacts(\"isContactInvited\", false));\n      }, 1000);\n    }\n  }, [dispatch, isContactInvited]);\n\n  /*\n  contact search\n  */\n  const [search, setSearch] = useState(\"\");\n  const onChangeSearch = (value: string) => {\n    setSearch(value);\n    let modifiedContacts = [...contactsList];\n    let filteredContacts = (modifiedContacts || []).filter((c: any) =>\n      c[\"firstName\"].toLowerCase().includes(value.toLowerCase())\n    );\n    setContacts(filteredContacts);\n  };\n\n  const totalC = (contacts || []).length;\n  const onSelectChat = (id: string | number, isChannel?: boolean) => {\n    if (isChannel) {\n      dispatch(getChannelDetails(id));\n    } else {\n      dispatch(getChatUserDetails(id));\n    }\n    dispatch(getChatUserConversations(id));\n    dispatch(changeSelectedChat(id));\n  };\n\n  return (\n    <>\n      <div className=\"position-relative\">\n        {getContactsLoading && <Loader />}\n        <ListHeader\n          search={search}\n          onChangeSearch={onChangeSearch}\n          openModal={openModal}\n        />\n\n        <AppSimpleBar className=\"chat-message-list chat-group-list\">\n          <div>\n            {totalC === 0 ? (\n              <EmptyStateResult searchedText={search} />\n            ) : (\n              (contactsData || []).map(\n                (letterContacts: DivideByKeyResultTypes, key: number) => (\n                  <Contact\n                    letterContacts={letterContacts}\n                    key={key}\n                    index={key}\n                    onSelectChat={onSelectChat}\n                  />\n                )\n              )\n            )}\n          </div>\n        </AppSimpleBar>\n      </div>\n      <InviteContactModal\n        isOpen={isOpen}\n        onClose={closeModal}\n        onInvite={onInviteContact}\n      />\n    </>\n  );\n};\n\nexport default Index;\n"]},"metadata":{},"sourceType":"module"}