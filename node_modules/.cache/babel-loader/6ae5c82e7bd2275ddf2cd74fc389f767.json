{"ast":null,"code":"import axios from \"axios\";\nimport MockAdapter from \"axios-mock-adapter\";\nimport * as url from \"../api/urls\"; // dummy data\n\nimport { // profile\nprofileDetails, myData, //contacts\ncontacts, onChangeContacts, // calls\ncalls, // channels\nuserChannels, onChangeUserChannels, // bookmarks\nbookmarks, onChangeBookmark, // chats\nfavourites, onChangeFavourite, directMessages, channels, onChangeDirectMessages, onChangeChannels, conversations, onChangeConversations, // archive\narchiveChats, onChangeArchives } from \"../data/index\";\nimport { settings, onChangeSettings } from \"../data/settings\";\nconst accessToken = \"Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6ImFkbWluIiwiYWRtaW4iOnRydWUsImp0aSI6ImQ2MTEwYzAxLWMwYjUtNDUzNy1iNDZhLTI0NTk5Mjc2YjY1NiIsImlhdCI6MTU5MjU2MDk2MCwiZXhwIjoxNTkyNTY0NjE5fQ.QgFSQtFaK_Ktauadttq1Is7f9w0SUtKcL8xCmkAvGLw\";\nlet users = [myData];\n\nconst fakeBackend = () => {\n  // This sets the mock adapter on the default instance\n  const mock = new MockAdapter(axios, {\n    onNoMatch: \"passthrough\"\n  });\n  mock.onPost(url.POST_FAKE_REGISTER).reply(config => {\n    const user = JSON.parse(config[\"data\"]);\n    users.push(user);\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        resolve([200, user]);\n      });\n    });\n  });\n  mock.onPost(\"/post-fake-login\").reply(config => {\n    const user = JSON.parse(config[\"data\"]);\n    const validUser = users.filter(usr => usr.email === user.email && usr.password === user.password);\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (validUser[\"length\"] === 1) {\n          setTimeout(() => {\n            resolve([200, validUser[0]]);\n          }, 1000);\n        } else {\n          reject([\"Username and password are invalid. Please enter correct username and password\"]);\n        }\n      });\n    });\n  });\n  mock.onPost(\"/fake-forget-pwd\").reply(config => {\n    // User needs to check that user is eXist or not and send mail for Reset New password\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        resolve([200, \"Check you mail and reset your password.\"]);\n      });\n    });\n  });\n  mock.onPost(\"/post-jwt-register\").reply(config => {\n    const user = JSON.parse(config[\"data\"]);\n    users.push(user);\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        resolve([200, user]);\n      });\n    });\n  });\n  mock.onPost(\"/post-jwt-login\").reply(config => {\n    const user = JSON.parse(config[\"data\"]);\n    const validUser = users.filter(usr => usr.email === user.email && usr.password === user.password);\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (validUser[\"length\"] === 1) {\n          // You have to generate AccessToken by jwt. but this is fakeBackend so, right now its dummy\n          const token = accessToken; // JWT AccessToken\n\n          const tokenObj = {\n            accessToken: token\n          }; // Token Obj\n\n          const validUserObj = { ...validUser[0],\n            ...tokenObj\n          }; // validUser Obj\n\n          resolve([200, validUserObj]);\n        } else {\n          reject([400, \"Username and password are invalid. Please enter correct username and password\"]);\n        }\n      });\n    });\n  });\n  mock.onPost(\"/post-jwt-profile\").reply(config => {\n    const user = JSON.parse(config[\"data\"]);\n    const one = config.headers;\n    let finalToken = one.Authorization;\n    const validUser = users.filter(usr => usr.uid === user.idx);\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        // Verify Jwt token from header.Authorization\n        if (finalToken === accessToken) {\n          if (validUser[\"length\"] === 1) {\n            let objIndex; //Find index of specific object using findIndex method.\n\n            objIndex = users.findIndex(obj => obj.uid === user.idx); //Update object's name property.\n\n            users[objIndex].username = user.username; // Assign a value to locastorage\n\n            localStorage.removeItem(\"authUser\");\n            localStorage.setItem(\"authUser\", JSON.stringify(users[objIndex]));\n            resolve([200, \"Profile Updated Successfully\"]);\n          } else {\n            reject([400, \"Something wrong for edit profile\"]);\n          }\n        } else {\n          reject([400, \"Invalid Token !!\"]);\n        }\n      });\n    });\n  });\n  mock.onPost(\"/post-fake-profile\").reply(config => {\n    const user = JSON.parse(config[\"data\"]);\n    const validUser = users.filter(usr => usr.uid === user.idx);\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (validUser[\"length\"] === 1) {\n          let objIndex; //Find index of specific object using findIndex method.\n\n          objIndex = users.findIndex(obj => obj.uid === user.idx); //Update object's name property.\n\n          users[objIndex].username = user.username; // Assign a value to locastorage\n\n          localStorage.removeItem(\"authUser\");\n          localStorage.setItem(\"authUser\", JSON.stringify(users[objIndex]));\n          resolve([200, \"Profile Updated Successfully\"]);\n        } else {\n          reject([400, \"Something wrong for edit profile\"]);\n        }\n      });\n    });\n  });\n  mock.onPost(\"/jwt-forget-pwd\").reply(config => {\n    // User needs to check that user is eXist or not and send mail for Reset New password\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        resolve([200, \"Check you mail and reset your password.\"]);\n      });\n    });\n  });\n  mock.onPut(url.USER_CHANGE_PASSWORD).reply(config => {\n    return new Promise((resolve, reject) => {\n      const user = JSON.parse(config[\"data\"]);\n      users[0].password = user.password;\n\n      if (user) {\n        resolve([200, users[0]]);\n      } else {\n        reject([\"Some thing went wrong!\"]);\n      }\n    });\n  });\n  /*\n  profile\n  */\n\n  mock.onGet(url.GET_PROFILE_DETAILS).reply(config => {\n    return new Promise((resolve, reject) => {\n      if (profileDetails) {\n        resolve([200, profileDetails]);\n      } else {\n        reject([\"Some thing went wrong!\"]);\n      }\n    });\n  });\n  /*\n  contacts\n  */\n\n  mock.onGet(url.GET_CONTACTS).reply(config => {\n    return new Promise((resolve, reject) => {\n      if (contacts) {\n        resolve([200, contacts]);\n      } else {\n        reject([\"Some thing went wrong!\"]);\n      }\n    });\n  });\n  mock.onPost(url.INVITE_CONTACT).reply(config => {\n    // const user = JSON.parse(config[\"data\"]);\n    return new Promise((resolve, reject) => {\n      resolve([200, \"User is Invited\"]);\n    });\n  });\n  /*\n  calls\n  */\n\n  mock.onGet(url.GET_CALLS_LIST).reply(config => {\n    return new Promise((resolve, reject) => {\n      if (calls) {\n        resolve([200, calls]);\n      } else {\n        reject([\"Some thing went wrong!\"]);\n      }\n    });\n  });\n  /*\n  bookmarks\n  */\n\n  mock.onGet(url.GET_BOOKMARKS_LIST).reply(config => {\n    return new Promise((resolve, reject) => {\n      if (bookmarks) {\n        resolve([200, bookmarks]);\n      } else {\n        reject([\"Some thing went wrong!\"]);\n      }\n    });\n  });\n  mock.onDelete(new RegExp(`${url.DELETE_BOOKMARK}/*`)).reply(config => {\n    const {\n      params\n    } = config;\n    return new Promise((resolve, reject) => {\n      if (params.id && bookmarks.length !== 0) {\n        const updatedB = bookmarks.filter(b => b.id + \"\" !== params.id + \"\");\n        onChangeBookmark(updatedB);\n        resolve([200, \"Bookmark is Deleted!\"]);\n      } else {\n        reject([\"Your id is not found\"]);\n      }\n    });\n  });\n  mock.onPut(new RegExp(`${url.UPDATE_BOOKMARK}/*`)).reply(config => {\n    const data = JSON.parse(config[\"data\"]);\n    return new Promise((resolve, reject) => {\n      if (data.id && bookmarks.length !== 0) {\n        const bookmIdx = bookmarks.findIndex(b => b.id + \"\" === data.id + \"\");\n\n        if (bookmIdx > -1) {\n          let updatedB = [...bookmarks];\n          updatedB[bookmIdx] = data;\n          onChangeBookmark(updatedB);\n        }\n\n        resolve([200, \"Bookmark is Updated!\"]);\n      } else {\n        reject([\"Some thing went wrong!\"]);\n      }\n    });\n  });\n  /*\n  settings\n  */\n\n  mock.onGet(url.GET_USER_SETTINGS).reply(config => {\n    return new Promise((resolve, reject) => {\n      if (settings) {\n        resolve([200, settings]);\n      } else {\n        reject([\"Some thing went wrong!\"]);\n      }\n    });\n  });\n  /*\n  chats\n  */\n\n  /*\n   settings\n   */\n\n  mock.onGet(url.GET_FAVOURITES).reply(config => {\n    return new Promise((resolve, reject) => {\n      if (favourites) {\n        resolve([200, favourites]);\n      } else {\n        reject([\"Some thing went wrong!\"]);\n      }\n    });\n  });\n  mock.onGet(url.GET_DIRECT_MESSAGES).reply(config => {\n    return new Promise((resolve, reject) => {\n      if (directMessages) {\n        resolve([200, directMessages]);\n      } else {\n        reject([\"Some thing went wrong!\"]);\n      }\n    });\n  });\n  mock.onGet(url.GET_CHANNELS).reply(config => {\n    return new Promise((resolve, reject) => {\n      if (channels) {\n        resolve([200, channels]);\n      } else {\n        reject([\"Some thing went wrong!\"]);\n      }\n    });\n  });\n  mock.onPost(url.ADD_CONTACTS).reply(config => {\n    const data = JSON.parse(config[\"data\"]);\n    return new Promise((resolve, reject) => {\n      if (data) {\n        let newC = [];\n\n        for (let index = 0; index < (data || []).length; index++) {\n          const contactId = data[index];\n          const contact = contacts.find(c => c.id + \"\" === contactId);\n\n          if (contact) {\n            newC = [...newC, contact];\n          }\n        }\n\n        onChangeDirectMessages([...directMessages, ...newC]);\n        resolve([200, \"Contacts Added!\"]);\n      } else {\n        reject([\"Some thing went wrong!\"]);\n      }\n    });\n  });\n  mock.onPost(url.CREATE_CHANNEL).reply(config => {\n    const data = JSON.parse(config[\"data\"]);\n    return new Promise((resolve, reject) => {\n      if (data) {\n        const newC = {\n          id: channels[channels.length - 1].id + new Date().getTime().toString(),\n          name: data.name,\n          description: data.description,\n          members: data.members\n        };\n        onChangeChannels([...channels, newC]);\n        resolve([200, \"Channel Created!\"]);\n      } else {\n        reject([400, \"Some thing went wrong!\"]);\n      }\n    });\n  });\n  mock.onGet(new RegExp(`${url.GET_CHAT_USER_DETAILS}/*`)).reply(config => {\n    const {\n      params\n    } = config;\n    let data;\n\n    if (params.id && contacts.length !== 0) {\n      const chat = (contacts || []).find(c => c.id + \"\" === params.id + \"\");\n\n      if (chat) {\n        data = chat;\n      }\n    }\n\n    return new Promise((resolve, reject) => {\n      if (data) {\n        setTimeout(() => {\n          resolve([200, data]);\n        });\n      } else {\n        reject([\"Your id is not found\"]);\n      }\n    });\n  });\n  mock.onGet(new RegExp(`${url.GET_CHAT_USER_CONVERSATIONS}/*`)).reply(config => {\n    const {\n      params\n    } = config;\n    let data;\n\n    if (params.id && conversations.length !== 0) {\n      const chat = (conversations || []).find(c => c.userId + \"\" === params.id + \"\");\n\n      if (chat) {\n        data = chat;\n      }\n    }\n\n    return new Promise((resolve, reject) => {\n      if (data) {\n        setTimeout(() => {\n          resolve([200, data]);\n        }, 500);\n      } else {\n        setTimeout(() => {\n          reject([\"Your id is not found\"]);\n        }, 500);\n      }\n    });\n  });\n  mock.onPost(url.SEND_MESSAGE).reply(config => {\n    const data = JSON.parse(config[\"data\"]);\n\n    if (data && data.meta && data.meta.receiver && data.meta.sender) {\n      let modifiedC = [...conversations];\n      const conversationIdx = (conversations || []).findIndex(c => c.userId + \"\" === data.meta.receiver + \"\");\n\n      if (conversationIdx > -1) {\n        const mid = conversations[conversationIdx].messages && conversations[conversationIdx].messages.length ? conversations[conversationIdx].messages.length + 1 : 1;\n        let newM = {\n          mId: mid,\n          text: data.text && data.text,\n          time: data.time,\n          meta: { ...data.meta,\n            sent: true,\n            received: false,\n            read: false\n          }\n        };\n\n        if (data.image && data.image.length) {\n          newM[\"image\"] = data.image;\n        }\n\n        if (data.attachments && data.attachments.length) {\n          newM[\"attachments\"] = data.attachments;\n        }\n\n        if (data.replyOf) {\n          newM[\"replyOf\"] = data.replyOf;\n        }\n\n        conversations[conversationIdx].messages = [...conversations[conversationIdx].messages, newM];\n        modifiedC = [...conversations];\n      } else {\n        // new message first time\n        let newM = {\n          mId: 1,\n          text: data.text,\n          time: data.time,\n          meta: { ...data.meta,\n            sent: true,\n            received: false,\n            read: false\n          }\n        };\n\n        if (data.image && data.image.length) {\n          newM[\"image\"] = data.image;\n        }\n\n        if (data.attachments && data.attachments.length) {\n          newM[\"attachments\"] = data.attachments;\n        }\n\n        if (data.replyOf) {\n          newM[\"replyOf\"] = data.replyOf;\n        }\n\n        const newC = {\n          conversationId: conversations.length + 1,\n          userId: data.meta.receiver,\n          messages: [{ ...newM\n          }]\n        };\n        modifiedC = [...conversations, newC];\n      }\n\n      onChangeConversations(modifiedC);\n    }\n\n    return new Promise((resolve, reject) => {\n      if (data && data.meta && data.meta.receiver && data.meta.sender) {\n        resolve([200, \"Channel Created!\"]);\n      } else {\n        reject([400, \"Some thing went wrong!\"]);\n      }\n    });\n  });\n  mock.onPut(new RegExp(`${url.RECEIVE_MESSAGE}/*`)).reply(config => {\n    const data = JSON.parse(config[\"data\"]);\n    let updatedUserC;\n\n    if (data.params && data.params.id && conversations.length !== 0) {\n      let modifiedC = [...conversations];\n      const conversationIdx = (modifiedC || []).findIndex(c => c.userId + \"\" === data.params.id + \"\");\n\n      if (conversationIdx > -1) {\n        if (modifiedC[conversationIdx].messages) {\n          modifiedC[conversationIdx].messages = (modifiedC[conversationIdx].messages || []).map(c => {\n            return { ...c,\n              meta: { ...c.meta,\n                received: true\n              }\n            };\n          });\n        }\n\n        updatedUserC = modifiedC[conversationIdx];\n        onChangeConversations(modifiedC);\n      }\n    }\n\n    return new Promise((resolve, reject) => {\n      if (updatedUserC) {\n        resolve([200, updatedUserC]);\n      } else {\n        setTimeout(() => {\n          reject([\"Your id is not found\"]);\n        }, 500);\n      }\n    });\n  });\n  mock.onPut(new RegExp(`${url.READ_MESSAGE}/*`)).reply(config => {\n    const data = JSON.parse(config[\"data\"]);\n    let updatedUserC;\n\n    if (data.params && data.params.id && conversations.length !== 0) {\n      let modifiedC = [...conversations];\n      const conversationIdx = (modifiedC || []).findIndex(c => c.userId + \"\" === data.params.id + \"\");\n\n      if (conversationIdx > -1) {\n        if (modifiedC[conversationIdx].messages) {\n          modifiedC[conversationIdx].messages = (modifiedC[conversationIdx].messages || []).map(c => {\n            return { ...c,\n              meta: { ...c.meta,\n                read: true\n              }\n            };\n          });\n        }\n\n        updatedUserC = modifiedC[conversationIdx];\n        onChangeConversations(modifiedC);\n      }\n    }\n\n    return new Promise((resolve, reject) => {\n      if (updatedUserC) {\n        resolve([200, updatedUserC]);\n      } else {\n        setTimeout(() => {\n          reject([\"Your id is not found\"]);\n        }, 500);\n      }\n    });\n  });\n  mock.onGet(new RegExp(`${url.RECEIVE_MESSAGE_FROM_USER}/*`)).reply(config => {\n    let updatedUserC;\n    const {\n      params\n    } = config;\n\n    if (params && params.id && conversations.length !== 0) {\n      let modifiedC = [...conversations];\n      const conversationIdx = (modifiedC || []).findIndex(c => c.userId + \"\" === params.id + \"\");\n\n      if (conversationIdx > -1) {\n        if (modifiedC[conversationIdx].messages) {\n          const newM = { ...modifiedC[conversationIdx].messages[modifiedC[conversationIdx].messages.length - 1]\n          };\n          modifiedC[conversationIdx].messages.push({ ...newM,\n            mId: newM.mId + new Date().getTime(),\n            meta: { ...newM.meta,\n              receiver: newM.meta.sender,\n              sender: newM.meta.receiver\n            }\n          });\n        }\n\n        updatedUserC = modifiedC[conversationIdx];\n        onChangeConversations(modifiedC);\n      }\n    }\n\n    return new Promise((resolve, reject) => {\n      if (updatedUserC) {\n        resolve([200, updatedUserC]);\n      } else {\n        setTimeout(() => {\n          reject([\"Your id is not found\"]);\n        }, 500);\n      }\n    });\n  });\n  mock.onDelete(new RegExp(`${url.DELETE_MESSAGE}/*`)).reply(config => {\n    const {\n      params\n    } = config;\n    return new Promise((resolve, reject) => {\n      if (params.userId && params.messageId) {\n        let modifiedC = [...conversations];\n        const conversationIdx = (modifiedC || []).findIndex(c => c.userId + \"\" === params.userId + \"\");\n\n        if (conversationIdx > -1) {\n          modifiedC[conversationIdx].messages = (modifiedC[conversationIdx].messages || []).filter(m => m.mId + \"\" !== params.messageId + \"\");\n        }\n\n        onChangeConversations(modifiedC);\n        resolve([200, \"Message is Deleted!\"]);\n      } else {\n        reject([\"Your id is not found\"]);\n      }\n    });\n  });\n  mock.onPost(url.FORWARD_MESSAGE).reply(config => {\n    const data = JSON.parse(config[\"data\"]);\n    let modifiedC = [...conversations];\n\n    if (data && data.contacts) {\n      for (let index = 0; index < data.contacts.length; index++) {\n        const c = data.contacts[index];\n        const conversationIdx = (modifiedC || []).findIndex(con => con.userId + \"\" === c + \"\");\n\n        if (conversationIdx > -1) {\n          const mid = modifiedC[conversationIdx].messages && modifiedC[conversationIdx].messages.length ? modifiedC[conversationIdx].messages.length + 1 : 1;\n          let newM = {\n            mId: mid,\n            text: data.message && data.message,\n            time: new Date().toISOString(),\n            meta: {\n              receiver: c,\n              sender: users[0].uid,\n              sent: true,\n              received: false,\n              read: false,\n              isForwarded: true\n            }\n          };\n\n          if (data.image && data.image.length) {\n            newM[\"image\"] = data.image;\n          }\n\n          if (data.attachments && data.attachments.length) {\n            newM[\"attachments\"] = data.attachments;\n          }\n\n          if (data.forwardedMessage) {\n            newM[\"replyOf\"] = data.forwardedMessage;\n          }\n\n          modifiedC[conversationIdx].messages = [...modifiedC[conversationIdx].messages, newM];\n          modifiedC = [...modifiedC];\n        } else {\n          // new message first time\n          let newM = {\n            mId: 1,\n            text: data.message && data.message,\n            time: new Date().toISOString(),\n            meta: {\n              receiver: \"614ecab4ac946a9bdafa4e3b\",\n              sender: users[0].uid,\n              sent: true,\n              received: false,\n              read: false,\n              isForwarded: true\n            }\n          };\n\n          if (data.image && data.image.length) {\n            newM[\"image\"] = data.image;\n          }\n\n          if (data.attachments && data.attachments.length) {\n            newM[\"attachments\"] = data.attachments;\n          }\n\n          if (data.forwardedMessage) {\n            newM[\"replyOf\"] = data.forwardedMessage;\n          }\n\n          const newC = {\n            conversationId: modifiedC.length + 1,\n            userId: c,\n            messages: [{ ...newM\n            }]\n          };\n          modifiedC = [...modifiedC, newC];\n        }\n      }\n    }\n\n    onChangeConversations(modifiedC);\n    return new Promise((resolve, reject) => {\n      if (data) {\n        resolve([200, \"Message is Forwarded!\"]);\n      } else {\n        reject([\"Your id is not found\"]);\n      }\n    });\n  });\n  mock.onDelete(new RegExp(`${url.DELETE_USER_MESSAGES}/*`)).reply(config => {\n    const {\n      params\n    } = config;\n    return new Promise((resolve, reject) => {\n      if (params.userId) {\n        let modifiedC = [...conversations];\n        modifiedC = (modifiedC || []).filter(c => c.userId + \"\" !== params.userId + \"\");\n        onChangeConversations(modifiedC);\n        resolve([200, \"Messages are Deleted!\"]);\n      } else {\n        reject([\"Your id is not found\"]);\n      }\n    });\n  });\n  mock.onGet(new RegExp(`${url.GET_CHANNEL_DETAILS}/*`)).reply(config => {\n    const {\n      params\n    } = config;\n    let data;\n\n    if (params.id && contacts.length !== 0) {\n      const chat = (userChannels || []).find(c => c.id + \"\" === params.id + \"\");\n\n      if (chat) {\n        data = chat;\n      }\n    }\n\n    return new Promise((resolve, reject) => {\n      if (data) {\n        setTimeout(() => {\n          resolve([200, data]);\n        });\n      } else {\n        reject([\"The channel is not found\"]);\n      }\n    });\n  });\n  mock.onPut(new RegExp(`${url.TOGGLE_FAVOURITE_CONTACT}/*`)).reply(config => {\n    const data = JSON.parse(config[\"data\"]);\n    let message = \"User has been added to your favourite\";\n    let modifiedC = [...contacts];\n    let modifiedF = [...favourites];\n    let modifiedD = [...directMessages];\n\n    if (data.params.id && contacts.length !== 0) {\n      const contactIdx = (modifiedC || []).findIndex(c => c.id + \"\" === data.params.id + \"\");\n\n      if (contactIdx > -1) {\n        if (contacts[contactIdx].isFavourite) {\n          contacts[contactIdx].isFavourite = false;\n          modifiedF = modifiedF.filter(f => f.id !== data.params.id);\n          message = \"User has been removed to your favourite\";\n        } else {\n          contacts[contactIdx].isFavourite = true;\n          modifiedF = [...modifiedF, contacts[contactIdx]];\n          modifiedD = modifiedD.filter(c => c.id !== data.params.id);\n        }\n      }\n    }\n\n    onChangeContacts(contacts);\n    onChangeFavourite(modifiedF);\n    onChangeDirectMessages(modifiedD);\n    return new Promise((resolve, reject) => {\n      if (data.params.id) {\n        setTimeout(() => {\n          resolve([200, message]);\n        });\n      } else {\n        reject([\"The channel is not found\"]);\n      }\n    });\n  });\n  mock.onGet(url.GET_ARCHIVE_CONTACT).reply(config => {\n    return new Promise((resolve, reject) => {\n      if (archiveChats) {\n        setTimeout(() => {\n          resolve([200, archiveChats]);\n        });\n      } else {\n        reject([\"The archive chat is not found\"]);\n      }\n    });\n  });\n  mock.onPut(new RegExp(`${url.TOGGLE_ARCHIVE_CONTACT}/*`)).reply(config => {\n    const data = JSON.parse(config[\"data\"]);\n    let message = \"User has been added to your archives\";\n    let modifiedC = [...contacts];\n    let modifiedA = [...archiveChats];\n    let modifiedD = [...directMessages];\n    let modifiedChannels = [...userChannels];\n    let modifiedChatChannels = [...channels];\n\n    if (data.params.id && contacts.length !== 0) {\n      const contactIdx = (modifiedC || []).findIndex(c => c.id + \"\" === data.params.id + \"\");\n      const channelIdx = (modifiedChannels || []).findIndex(c => c.id + \"\" === data.params.id + \"\");\n\n      if (contactIdx > -1) {\n        if (contacts[contactIdx].isArchived) {\n          contacts[contactIdx].isArchived = false;\n          modifiedA = modifiedA.filter(f => f.id !== data.params.id);\n          message = \"User has been removed to your archives\";\n        } else {\n          contacts[contactIdx].isArchived = true;\n          modifiedA = [...modifiedA, contacts[contactIdx]];\n          modifiedD = modifiedD.filter(c => c.id !== data.params.id);\n        }\n      } else if (channelIdx > -1) {\n        if (userChannels[channelIdx].isArchived) {\n          userChannels[channelIdx].isArchived = false;\n          modifiedA = modifiedA.filter(f => f.id !== data.params.id);\n          message = \"User has been removed to your archives\";\n        } else {\n          userChannels[channelIdx].isArchived = true;\n          modifiedA = [...modifiedA, { ...userChannels[channelIdx],\n            isChannel: true\n          }];\n          modifiedChannels = modifiedChannels.filter(c => c.id !== data.params.id);\n          modifiedChatChannels = modifiedChatChannels.filter(c => c.id !== data.params.id);\n        }\n      }\n    }\n\n    onChangeContacts(contacts);\n    onChangeArchives(modifiedA);\n    onChangeDirectMessages(modifiedD);\n    onChangeUserChannels(modifiedChannels);\n    onChangeChannels(modifiedChatChannels);\n    return new Promise((resolve, reject) => {\n      if (data.params.id) {\n        setTimeout(() => {\n          resolve([200, message]);\n        });\n      } else {\n        reject([\"Internal Error!\"]);\n      }\n    });\n  });\n  mock.onPut(new RegExp(`${url.READ_CONVERSATION}/*`)).reply(config => {\n    const data = JSON.parse(config[\"data\"]);\n    let modifiedD = [...directMessages];\n    let modifiedF = [...favourites];\n    let modifiedC = [...channels];\n\n    if (data.params && data.params.id && conversations.length !== 0) {\n      /*\n      for chat conversations\n      */\n      const contactIdx = (modifiedD || []).findIndex(c => c.id + \"\" === data.params.id + \"\");\n      const contactFIdx = (modifiedF || []).findIndex(c => c.id + \"\" === data.params.id + \"\");\n      const contactCIdx = (modifiedC || []).findIndex(c => c.id + \"\" === data.params.id + \"\");\n\n      if (contactIdx > -1 && modifiedD[contactIdx][\"meta\"]) {\n        modifiedD[contactIdx].meta.unRead = 0;\n        onChangeDirectMessages(modifiedD);\n      }\n\n      if (contactFIdx > -1 && modifiedF[contactFIdx][\"meta\"]) {\n        modifiedF[contactFIdx].meta.unRead = 0;\n        onChangeFavourite(modifiedF);\n      }\n\n      if (contactCIdx > -1 && modifiedC[contactCIdx][\"meta\"]) {\n        modifiedC[contactCIdx].meta.unRead = 0;\n        onChangeChannels(modifiedC);\n      }\n    }\n\n    return new Promise((resolve, reject) => {\n      if (modifiedD) {\n        resolve([200, \"true\"]);\n      } else {\n        setTimeout(() => {\n          reject([\"Your id is not found\"]);\n        }, 500);\n      }\n    });\n  });\n  mock.onDelete(new RegExp(`${url.DELETE_IMAGE}/*`)).reply(config => {\n    const {\n      params\n    } = config;\n    return new Promise((resolve, reject) => {\n      if (params.userId && params.messageId && params.imageId) {\n        let modifiedC = [...conversations];\n        const conversationIdx = (modifiedC || []).findIndex(c => c.userId + \"\" === params.userId + \"\");\n\n        if (conversationIdx > -1 && modifiedC[conversationIdx].messages) {\n          const mIdx = (modifiedC[conversationIdx].messages || []).findIndex(c => c.mId + \"\" === params.messageId + \"\");\n\n          if (mIdx > -1 && modifiedC[conversationIdx].messages[mIdx] && modifiedC[conversationIdx].messages[mIdx].image) {\n            var _modifiedC$conversati;\n\n            if (((_modifiedC$conversati = modifiedC[conversationIdx].messages[mIdx].image) === null || _modifiedC$conversati === void 0 ? void 0 : _modifiedC$conversati.length) === 1) {\n              modifiedC[conversationIdx].messages = (modifiedC[conversationIdx].messages || []).filter(m => m.mId + \"\" !== params.messageId + \"\");\n            } else {\n              var _modifiedC$conversati2;\n\n              modifiedC[conversationIdx].messages[mIdx].image = (_modifiedC$conversati2 = modifiedC[conversationIdx].messages[mIdx].image) === null || _modifiedC$conversati2 === void 0 ? void 0 : _modifiedC$conversati2.filter(m => m.id + \"\" !== params.imageId + \"\");\n            }\n          }\n        }\n\n        onChangeConversations(modifiedC);\n        resolve([200, \"Message is Deleted!\"]);\n      } else {\n        reject([\"Your id is not found\"]);\n      }\n    });\n  });\n  mock.onPut(new RegExp(`${url.UPDATE_ETTINGS}/*`)).reply(config => {\n    const data = JSON.parse(config[\"data\"]);\n    const {\n      field,\n      value\n    } = data;\n    const modifiedS = { ...settings\n    };\n    modifiedS[field] = value;\n    onChangeSettings(modifiedS);\n    return new Promise((resolve, reject) => {\n      if (modifiedS) {\n        setTimeout(() => {\n          resolve([200, \"Setting Updated!\"]);\n        });\n      } else {\n        reject([\"Something went wrong!\"]);\n      }\n    });\n  });\n};\n\nexport default fakeBackend;","map":{"version":3,"sources":["/Users/huy8bit/Desktop/DRIVE/JOB/webchatFE/src/helpers/fakeBackend.ts"],"names":["axios","MockAdapter","url","profileDetails","myData","contacts","onChangeContacts","calls","userChannels","onChangeUserChannels","bookmarks","onChangeBookmark","favourites","onChangeFavourite","directMessages","channels","onChangeDirectMessages","onChangeChannels","conversations","onChangeConversations","archiveChats","onChangeArchives","settings","onChangeSettings","accessToken","users","fakeBackend","mock","onNoMatch","onPost","POST_FAKE_REGISTER","reply","config","user","JSON","parse","push","Promise","resolve","reject","setTimeout","validUser","filter","usr","email","password","token","tokenObj","validUserObj","one","headers","finalToken","Authorization","uid","idx","objIndex","findIndex","obj","username","localStorage","removeItem","setItem","stringify","onPut","USER_CHANGE_PASSWORD","onGet","GET_PROFILE_DETAILS","GET_CONTACTS","INVITE_CONTACT","GET_CALLS_LIST","GET_BOOKMARKS_LIST","onDelete","RegExp","DELETE_BOOKMARK","params","id","length","updatedB","b","UPDATE_BOOKMARK","data","bookmIdx","GET_USER_SETTINGS","GET_FAVOURITES","GET_DIRECT_MESSAGES","GET_CHANNELS","ADD_CONTACTS","newC","index","contactId","contact","find","c","CREATE_CHANNEL","Date","getTime","toString","name","description","members","GET_CHAT_USER_DETAILS","chat","GET_CHAT_USER_CONVERSATIONS","userId","SEND_MESSAGE","meta","receiver","sender","modifiedC","conversationIdx","mid","messages","newM","mId","text","time","sent","received","read","image","attachments","replyOf","conversationId","RECEIVE_MESSAGE","updatedUserC","map","READ_MESSAGE","RECEIVE_MESSAGE_FROM_USER","DELETE_MESSAGE","messageId","m","FORWARD_MESSAGE","con","message","toISOString","isForwarded","forwardedMessage","DELETE_USER_MESSAGES","GET_CHANNEL_DETAILS","TOGGLE_FAVOURITE_CONTACT","modifiedF","modifiedD","contactIdx","isFavourite","f","GET_ARCHIVE_CONTACT","TOGGLE_ARCHIVE_CONTACT","modifiedA","modifiedChannels","modifiedChatChannels","channelIdx","isArchived","isChannel","READ_CONVERSATION","contactFIdx","contactCIdx","unRead","DELETE_IMAGE","imageId","mIdx","UPDATE_ETTINGS","field","value","modifiedS"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport MockAdapter from \"axios-mock-adapter\";\nimport * as url from \"../api/urls\";\n\n// dummy data\nimport {\n  // profile\n  profileDetails,\n  myData,\n\n  //contacts\n  contacts,\n  onChangeContacts,\n\n  // calls\n  calls,\n\n  // channels\n  userChannels,\n  onChangeUserChannels,\n\n  // bookmarks\n  bookmarks,\n  onChangeBookmark,\n\n  // chats\n  favourites,\n  onChangeFavourite,\n  directMessages,\n  channels,\n  onChangeDirectMessages,\n  onChangeChannels,\n  conversations,\n  onChangeConversations,\n\n  // archive\n  archiveChats,\n  onChangeArchives,\n} from \"../data/index\";\nimport { settings, onChangeSettings } from \"../data/settings\";\n\nconst accessToken =\n  \"Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6ImFkbWluIiwiYWRtaW4iOnRydWUsImp0aSI6ImQ2MTEwYzAxLWMwYjUtNDUzNy1iNDZhLTI0NTk5Mjc2YjY1NiIsImlhdCI6MTU5MjU2MDk2MCwiZXhwIjoxNTkyNTY0NjE5fQ.QgFSQtFaK_Ktauadttq1Is7f9w0SUtKcL8xCmkAvGLw\";\n\nlet users = [myData];\n\nconst fakeBackend = () => {\n  // This sets the mock adapter on the default instance\n  const mock = new MockAdapter(axios, { onNoMatch: \"passthrough\" });\n\n  mock.onPost(url.POST_FAKE_REGISTER).reply(config => {\n    const user = JSON.parse(config[\"data\"]);\n    users.push(user);\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        resolve([200, user]);\n      });\n    });\n  });\n\n  mock.onPost(\"/post-fake-login\").reply(config => {\n    const user = JSON.parse(config[\"data\"]);\n    const validUser = users.filter(\n      usr => usr.email === user.email && usr.password === user.password\n    );\n\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (validUser[\"length\"] === 1) {\n          setTimeout(() => {\n            resolve([200, validUser[0]]);\n          }, 1000);\n        } else {\n          reject([\n            \"Username and password are invalid. Please enter correct username and password\",\n          ]);\n        }\n      });\n    });\n  });\n\n  mock.onPost(\"/fake-forget-pwd\").reply(config => {\n    // User needs to check that user is eXist or not and send mail for Reset New password\n\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        resolve([200, \"Check you mail and reset your password.\"]);\n      });\n    });\n  });\n\n  mock.onPost(\"/post-jwt-register\").reply(config => {\n    const user = JSON.parse(config[\"data\"]);\n    users.push(user);\n\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        resolve([200, user]);\n      });\n    });\n  });\n\n  mock.onPost(\"/post-jwt-login\").reply(config => {\n    const user = JSON.parse(config[\"data\"]);\n    const validUser = users.filter(\n      usr => usr.email === user.email && usr.password === user.password\n    );\n\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (validUser[\"length\"] === 1) {\n          // You have to generate AccessToken by jwt. but this is fakeBackend so, right now its dummy\n          const token = accessToken;\n\n          // JWT AccessToken\n          const tokenObj = { accessToken: token }; // Token Obj\n          const validUserObj = { ...validUser[0], ...tokenObj }; // validUser Obj\n\n          resolve([200, validUserObj]);\n        } else {\n          reject([\n            400,\n            \"Username and password are invalid. Please enter correct username and password\",\n          ]);\n        }\n      });\n    });\n  });\n\n  mock.onPost(\"/post-jwt-profile\").reply(config => {\n    const user = JSON.parse(config[\"data\"]);\n\n    const one = config.headers;\n\n    let finalToken = one.Authorization;\n\n    const validUser = users.filter(usr => usr.uid === user.idx);\n\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        // Verify Jwt token from header.Authorization\n        if (finalToken === accessToken) {\n          if (validUser[\"length\"] === 1) {\n            let objIndex;\n\n            //Find index of specific object using findIndex method.\n            objIndex = users.findIndex(obj => obj.uid === user.idx);\n\n            //Update object's name property.\n            users[objIndex].username = user.username;\n\n            // Assign a value to locastorage\n            localStorage.removeItem(\"authUser\");\n            localStorage.setItem(\"authUser\", JSON.stringify(users[objIndex]));\n\n            resolve([200, \"Profile Updated Successfully\"]);\n          } else {\n            reject([400, \"Something wrong for edit profile\"]);\n          }\n        } else {\n          reject([400, \"Invalid Token !!\"]);\n        }\n      });\n    });\n  });\n\n  mock.onPost(\"/post-fake-profile\").reply(config => {\n    const user = JSON.parse(config[\"data\"]);\n\n    const validUser = users.filter(usr => usr.uid === user.idx);\n\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (validUser[\"length\"] === 1) {\n          let objIndex;\n\n          //Find index of specific object using findIndex method.\n          objIndex = users.findIndex(obj => obj.uid === user.idx);\n\n          //Update object's name property.\n          users[objIndex].username = user.username;\n\n          // Assign a value to locastorage\n          localStorage.removeItem(\"authUser\");\n          localStorage.setItem(\"authUser\", JSON.stringify(users[objIndex]));\n\n          resolve([200, \"Profile Updated Successfully\"]);\n        } else {\n          reject([400, \"Something wrong for edit profile\"]);\n        }\n      });\n    });\n  });\n\n  mock.onPost(\"/jwt-forget-pwd\").reply(config => {\n    // User needs to check that user is eXist or not and send mail for Reset New password\n\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        resolve([200, \"Check you mail and reset your password.\"]);\n      });\n    });\n  });\n\n  mock.onPut(url.USER_CHANGE_PASSWORD).reply(config => {\n    return new Promise((resolve, reject) => {\n      const user = JSON.parse(config[\"data\"]);\n      users[0].password = user.password;\n      if (user) {\n        resolve([200, users[0]]);\n      } else {\n        reject([\"Some thing went wrong!\"]);\n      }\n    });\n  });\n\n  /*\n  profile\n  */\n  mock.onGet(url.GET_PROFILE_DETAILS).reply(config => {\n    return new Promise((resolve, reject) => {\n      if (profileDetails) {\n        resolve([200, profileDetails]);\n      } else {\n        reject([\"Some thing went wrong!\"]);\n      }\n    });\n  });\n\n  /*\n  contacts\n  */\n  mock.onGet(url.GET_CONTACTS).reply(config => {\n    return new Promise((resolve, reject) => {\n      if (contacts) {\n        resolve([200, contacts]);\n      } else {\n        reject([\"Some thing went wrong!\"]);\n      }\n    });\n  });\n\n  mock.onPost(url.INVITE_CONTACT).reply(config => {\n    // const user = JSON.parse(config[\"data\"]);\n\n    return new Promise((resolve, reject) => {\n      resolve([200, \"User is Invited\"]);\n    });\n  });\n\n  /*\n  calls\n  */\n  mock.onGet(url.GET_CALLS_LIST).reply(config => {\n    return new Promise((resolve, reject) => {\n      if (calls) {\n        resolve([200, calls]);\n      } else {\n        reject([\"Some thing went wrong!\"]);\n      }\n    });\n  });\n\n  /*\n  bookmarks\n  */\n  mock.onGet(url.GET_BOOKMARKS_LIST).reply(config => {\n    return new Promise((resolve, reject) => {\n      if (bookmarks) {\n        resolve([200, bookmarks]);\n      } else {\n        reject([\"Some thing went wrong!\"]);\n      }\n    });\n  });\n\n  mock.onDelete(new RegExp(`${url.DELETE_BOOKMARK}/*`)).reply(config => {\n    const { params } = config;\n\n    return new Promise((resolve, reject) => {\n      if (params.id && bookmarks.length !== 0) {\n        const updatedB = bookmarks.filter(\n          (b: any) => b.id + \"\" !== params.id + \"\"\n        );\n        onChangeBookmark(updatedB);\n        resolve([200, \"Bookmark is Deleted!\"]);\n      } else {\n        reject([\"Your id is not found\"]);\n      }\n    });\n  });\n\n  mock.onPut(new RegExp(`${url.UPDATE_BOOKMARK}/*`)).reply(config => {\n    const data = JSON.parse(config[\"data\"]);\n    return new Promise((resolve, reject) => {\n      if (data.id && bookmarks.length !== 0) {\n        const bookmIdx = bookmarks.findIndex(\n          (b: any) => b.id + \"\" === data.id + \"\"\n        );\n\n        if (bookmIdx > -1) {\n          let updatedB = [...bookmarks];\n          updatedB[bookmIdx] = data;\n          onChangeBookmark(updatedB);\n        }\n        resolve([200, \"Bookmark is Updated!\"]);\n      } else {\n        reject([\"Some thing went wrong!\"]);\n      }\n    });\n  });\n\n  /*\n  settings\n  */\n  mock.onGet(url.GET_USER_SETTINGS).reply(config => {\n    return new Promise((resolve, reject) => {\n      if (settings) {\n        resolve([200, settings]);\n      } else {\n        reject([\"Some thing went wrong!\"]);\n      }\n    });\n  });\n\n  /*\n  chats\n  */\n  /*\n   settings\n   */\n  mock.onGet(url.GET_FAVOURITES).reply(config => {\n    return new Promise((resolve, reject) => {\n      if (favourites) {\n        resolve([200, favourites]);\n      } else {\n        reject([\"Some thing went wrong!\"]);\n      }\n    });\n  });\n\n  mock.onGet(url.GET_DIRECT_MESSAGES).reply(config => {\n    return new Promise((resolve, reject) => {\n      if (directMessages) {\n        resolve([200, directMessages]);\n      } else {\n        reject([\"Some thing went wrong!\"]);\n      }\n    });\n  });\n\n  mock.onGet(url.GET_CHANNELS).reply(config => {\n    return new Promise((resolve, reject) => {\n      if (channels) {\n        resolve([200, channels]);\n      } else {\n        reject([\"Some thing went wrong!\"]);\n      }\n    });\n  });\n\n  mock.onPost(url.ADD_CONTACTS).reply(config => {\n    const data = JSON.parse(config[\"data\"]);\n\n    return new Promise((resolve, reject) => {\n      if (data) {\n        let newC: Array<any> = [];\n        for (let index = 0; index < (data || []).length; index++) {\n          const contactId = data[index];\n          const contact = contacts.find((c: any) => c.id + \"\" === contactId);\n          if (contact) {\n            newC = [...newC, contact];\n          }\n        }\n        onChangeDirectMessages([...directMessages, ...newC]);\n        resolve([200, \"Contacts Added!\"]);\n      } else {\n        reject([\"Some thing went wrong!\"]);\n      }\n    });\n  });\n\n  mock.onPost(url.CREATE_CHANNEL).reply(config => {\n    const data = JSON.parse(config[\"data\"]);\n    return new Promise((resolve, reject) => {\n      if (data) {\n        const newC = {\n          id:\n            channels[channels.length - 1].id + new Date().getTime().toString(),\n          name: data.name,\n          description: data.description,\n          members: data.members,\n        };\n        onChangeChannels([...channels, newC]);\n        resolve([200, \"Channel Created!\"]);\n      } else {\n        reject([400, \"Some thing went wrong!\"]);\n      }\n    });\n  });\n\n  mock.onGet(new RegExp(`${url.GET_CHAT_USER_DETAILS}/*`)).reply(config => {\n    const { params } = config;\n    let data: any;\n    if (params.id && contacts.length !== 0) {\n      const chat = (contacts || []).find(\n        (c: any) => c.id + \"\" === params.id + \"\"\n      );\n      if (chat) {\n        data = chat;\n      }\n    }\n\n    return new Promise((resolve, reject) => {\n      if (data) {\n        setTimeout(() => {\n          resolve([200, data]);\n        });\n      } else {\n        reject([\"Your id is not found\"]);\n      }\n    });\n  });\n\n  mock\n    .onGet(new RegExp(`${url.GET_CHAT_USER_CONVERSATIONS}/*`))\n    .reply(config => {\n      const { params } = config;\n\n      let data: any;\n      if (params.id && conversations.length !== 0) {\n        const chat = (conversations || []).find(\n          (c: any) => c.userId + \"\" === params.id + \"\"\n        );\n        if (chat) {\n          data = chat;\n        }\n      }\n\n      return new Promise((resolve, reject) => {\n        if (data) {\n          setTimeout(() => {\n            resolve([200, data]);\n          }, 500);\n        } else {\n          setTimeout(() => {\n            reject([\"Your id is not found\"]);\n          }, 500);\n        }\n      });\n    });\n\n  mock.onPost(url.SEND_MESSAGE).reply(config => {\n    const data = JSON.parse(config[\"data\"]);\n    if (data && data.meta && data.meta.receiver && data.meta.sender) {\n      let modifiedC = [...conversations];\n      const conversationIdx = (conversations || []).findIndex(\n        (c: any) => c.userId + \"\" === data.meta.receiver + \"\"\n      );\n      if (conversationIdx > -1) {\n        const mid =\n          conversations[conversationIdx].messages &&\n          conversations[conversationIdx].messages.length\n            ? conversations[conversationIdx].messages.length + 1\n            : 1;\n        let newM: any = {\n          mId: mid,\n          text: data.text && data.text,\n          time: data.time,\n          meta: {\n            ...data.meta,\n            sent: true,\n            received: false,\n            read: false,\n          },\n        };\n        if (data.image && data.image.length) {\n          newM[\"image\"] = data.image;\n        }\n        if (data.attachments && data.attachments.length) {\n          newM[\"attachments\"] = data.attachments;\n        }\n        if (data.replyOf) {\n          newM[\"replyOf\"] = data.replyOf;\n        }\n\n        conversations[conversationIdx].messages = [\n          ...conversations[conversationIdx].messages,\n          newM,\n        ];\n        modifiedC = [...conversations];\n      } else {\n        // new message first time\n        let newM: any = {\n          mId: 1,\n          text: data.text,\n          time: data.time,\n          meta: {\n            ...data.meta,\n            sent: true,\n            received: false,\n            read: false,\n          },\n        };\n        if (data.image && data.image.length) {\n          newM[\"image\"] = data.image;\n        }\n        if (data.attachments && data.attachments.length) {\n          newM[\"attachments\"] = data.attachments;\n        }\n        if (data.replyOf) {\n          newM[\"replyOf\"] = data.replyOf;\n        }\n        const newC = {\n          conversationId: conversations.length + 1,\n          userId: data.meta.receiver,\n          messages: [\n            {\n              ...newM,\n            },\n          ],\n        };\n        modifiedC = [...conversations, newC];\n      }\n      onChangeConversations(modifiedC);\n    }\n\n    return new Promise((resolve, reject) => {\n      if (data && data.meta && data.meta.receiver && data.meta.sender) {\n        resolve([200, \"Channel Created!\"]);\n      } else {\n        reject([400, \"Some thing went wrong!\"]);\n      }\n    });\n  });\n\n  mock.onPut(new RegExp(`${url.RECEIVE_MESSAGE}/*`)).reply(config => {\n    const data = JSON.parse(config[\"data\"]);\n    let updatedUserC: any;\n    if (data.params && data.params.id && conversations.length !== 0) {\n      let modifiedC = [...conversations];\n      const conversationIdx = (modifiedC || []).findIndex(\n        (c: any) => c.userId + \"\" === data.params.id + \"\"\n      );\n      if (conversationIdx > -1) {\n        if (modifiedC[conversationIdx].messages) {\n          modifiedC[conversationIdx].messages = (\n            modifiedC[conversationIdx].messages || []\n          ).map((c: any) => {\n            return {\n              ...c,\n              meta: { ...c.meta, received: true },\n            };\n          });\n        }\n        updatedUserC = modifiedC[conversationIdx];\n        onChangeConversations(modifiedC);\n      }\n    }\n\n    return new Promise((resolve, reject) => {\n      if (updatedUserC) {\n        resolve([200, updatedUserC]);\n      } else {\n        setTimeout(() => {\n          reject([\"Your id is not found\"]);\n        }, 500);\n      }\n    });\n  });\n\n  mock.onPut(new RegExp(`${url.READ_MESSAGE}/*`)).reply(config => {\n    const data = JSON.parse(config[\"data\"]);\n    let updatedUserC: any;\n    if (data.params && data.params.id && conversations.length !== 0) {\n      let modifiedC = [...conversations];\n      const conversationIdx = (modifiedC || []).findIndex(\n        (c: any) => c.userId + \"\" === data.params.id + \"\"\n      );\n      if (conversationIdx > -1) {\n        if (modifiedC[conversationIdx].messages) {\n          modifiedC[conversationIdx].messages = (\n            modifiedC[conversationIdx].messages || []\n          ).map((c: any) => {\n            return {\n              ...c,\n              meta: { ...c.meta, read: true },\n            };\n          });\n        }\n        updatedUserC = modifiedC[conversationIdx];\n        onChangeConversations(modifiedC);\n      }\n    }\n\n    return new Promise((resolve, reject) => {\n      if (updatedUserC) {\n        resolve([200, updatedUserC]);\n      } else {\n        setTimeout(() => {\n          reject([\"Your id is not found\"]);\n        }, 500);\n      }\n    });\n  });\n\n  mock.onGet(new RegExp(`${url.RECEIVE_MESSAGE_FROM_USER}/*`)).reply(config => {\n    let updatedUserC: any;\n    const { params } = config;\n    if (params && params.id && conversations.length !== 0) {\n      let modifiedC = [...conversations];\n      const conversationIdx = (modifiedC || []).findIndex(\n        (c: any) => c.userId + \"\" === params.id + \"\"\n      );\n      if (conversationIdx > -1) {\n        if (modifiedC[conversationIdx].messages) {\n          const newM = {\n            ...modifiedC[conversationIdx].messages[\n              modifiedC[conversationIdx].messages.length - 1\n            ],\n          };\n\n          modifiedC[conversationIdx].messages.push({\n            ...newM,\n            mId: newM.mId + new Date().getTime(),\n            meta: {\n              ...newM.meta,\n              receiver: newM.meta.sender,\n              sender: newM.meta.receiver,\n            },\n          });\n        }\n        updatedUserC = modifiedC[conversationIdx];\n        onChangeConversations(modifiedC);\n      }\n    }\n\n    return new Promise((resolve, reject) => {\n      if (updatedUserC) {\n        resolve([200, updatedUserC]);\n      } else {\n        setTimeout(() => {\n          reject([\"Your id is not found\"]);\n        }, 500);\n      }\n    });\n  });\n\n  mock.onDelete(new RegExp(`${url.DELETE_MESSAGE}/*`)).reply(config => {\n    const { params } = config;\n\n    return new Promise((resolve, reject) => {\n      if (params.userId && params.messageId) {\n        let modifiedC = [...conversations];\n        const conversationIdx = (modifiedC || []).findIndex(\n          (c: any) => c.userId + \"\" === params.userId + \"\"\n        );\n        if (conversationIdx > -1) {\n          modifiedC[conversationIdx].messages = (\n            modifiedC[conversationIdx].messages || []\n          ).filter((m: any) => m.mId + \"\" !== params.messageId + \"\");\n        }\n        onChangeConversations(modifiedC);\n        resolve([200, \"Message is Deleted!\"]);\n      } else {\n        reject([\"Your id is not found\"]);\n      }\n    });\n  });\n\n  mock.onPost(url.FORWARD_MESSAGE).reply(config => {\n    const data = JSON.parse(config[\"data\"]);\n    let modifiedC = [...conversations];\n    if (data && data.contacts) {\n      for (let index = 0; index < data.contacts.length; index++) {\n        const c = data.contacts[index];\n        const conversationIdx = (modifiedC || []).findIndex(\n          (con: any) => con.userId + \"\" === c + \"\"\n        );\n\n        if (conversationIdx > -1) {\n          const mid =\n            modifiedC[conversationIdx].messages &&\n            modifiedC[conversationIdx].messages.length\n              ? modifiedC[conversationIdx].messages.length + 1\n              : 1;\n          let newM: any = {\n            mId: mid,\n            text: data.message && data.message,\n            time: new Date().toISOString(),\n            meta: {\n              receiver: c,\n              sender: users[0].uid,\n              sent: true,\n              received: false,\n              read: false,\n              isForwarded: true,\n            },\n          };\n          if (data.image && data.image.length) {\n            newM[\"image\"] = data.image;\n          }\n          if (data.attachments && data.attachments.length) {\n            newM[\"attachments\"] = data.attachments;\n          }\n          if (data.forwardedMessage) {\n            newM[\"replyOf\"] = data.forwardedMessage;\n          }\n\n          modifiedC[conversationIdx].messages = [\n            ...modifiedC[conversationIdx].messages,\n            newM,\n          ];\n          modifiedC = [...modifiedC];\n        } else {\n          // new message first time\n          let newM: any = {\n            mId: 1,\n            text: data.message && data.message,\n            time: new Date().toISOString(),\n            meta: {\n              receiver: \"614ecab4ac946a9bdafa4e3b\",\n              sender: users[0].uid,\n              sent: true,\n              received: false,\n              read: false,\n              isForwarded: true,\n            },\n          };\n          if (data.image && data.image.length) {\n            newM[\"image\"] = data.image;\n          }\n          if (data.attachments && data.attachments.length) {\n            newM[\"attachments\"] = data.attachments;\n          }\n          if (data.forwardedMessage) {\n            newM[\"replyOf\"] = data.forwardedMessage;\n          }\n          const newC = {\n            conversationId: modifiedC.length + 1,\n            userId: c,\n            messages: [\n              {\n                ...newM,\n              },\n            ],\n          };\n          modifiedC = [...modifiedC, newC];\n        }\n      }\n    }\n\n    onChangeConversations(modifiedC);\n    return new Promise((resolve, reject) => {\n      if (data) {\n        resolve([200, \"Message is Forwarded!\"]);\n      } else {\n        reject([\"Your id is not found\"]);\n      }\n    });\n  });\n\n  mock.onDelete(new RegExp(`${url.DELETE_USER_MESSAGES}/*`)).reply(config => {\n    const { params } = config;\n\n    return new Promise((resolve, reject) => {\n      if (params.userId) {\n        let modifiedC = [...conversations];\n        modifiedC = (modifiedC || []).filter(\n          (c: any) => c.userId + \"\" !== params.userId + \"\"\n        );\n        onChangeConversations(modifiedC);\n        resolve([200, \"Messages are Deleted!\"]);\n      } else {\n        reject([\"Your id is not found\"]);\n      }\n    });\n  });\n\n  mock.onGet(new RegExp(`${url.GET_CHANNEL_DETAILS}/*`)).reply(config => {\n    const { params } = config;\n    let data: any;\n    if (params.id && contacts.length !== 0) {\n      const chat = (userChannels || []).find(\n        (c: any) => c.id + \"\" === params.id + \"\"\n      );\n      if (chat) {\n        data = chat;\n      }\n    }\n\n    return new Promise((resolve, reject) => {\n      if (data) {\n        setTimeout(() => {\n          resolve([200, data]);\n        });\n      } else {\n        reject([\"The channel is not found\"]);\n      }\n    });\n  });\n\n  mock.onPut(new RegExp(`${url.TOGGLE_FAVOURITE_CONTACT}/*`)).reply(config => {\n    const data = JSON.parse(config[\"data\"]);\n\n    let message = \"User has been added to your favourite\";\n    let modifiedC = [...contacts];\n    let modifiedF = [...favourites];\n    let modifiedD = [...directMessages];\n    if (data.params.id && contacts.length !== 0) {\n      const contactIdx = (modifiedC || []).findIndex(\n        (c: any) => c.id + \"\" === data.params.id + \"\"\n      );\n      if (contactIdx > -1) {\n        if (contacts[contactIdx].isFavourite) {\n          contacts[contactIdx].isFavourite = false;\n          modifiedF = modifiedF.filter((f: any) => f.id !== data.params.id);\n          message = \"User has been removed to your favourite\";\n        } else {\n          contacts[contactIdx].isFavourite = true;\n          modifiedF = [...modifiedF, contacts[contactIdx]];\n          modifiedD = modifiedD.filter((c: any) => c.id !== data.params.id);\n        }\n      }\n    }\n    onChangeContacts(contacts);\n    onChangeFavourite(modifiedF);\n    onChangeDirectMessages(modifiedD);\n\n    return new Promise((resolve, reject) => {\n      if (data.params.id) {\n        setTimeout(() => {\n          resolve([200, message]);\n        });\n      } else {\n        reject([\"The channel is not found\"]);\n      }\n    });\n  });\n\n  mock.onGet(url.GET_ARCHIVE_CONTACT).reply(config => {\n    return new Promise((resolve, reject) => {\n      if (archiveChats) {\n        setTimeout(() => {\n          resolve([200, archiveChats]);\n        });\n      } else {\n        reject([\"The archive chat is not found\"]);\n      }\n    });\n  });\n\n  mock.onPut(new RegExp(`${url.TOGGLE_ARCHIVE_CONTACT}/*`)).reply(config => {\n    const data = JSON.parse(config[\"data\"]);\n\n    let message = \"User has been added to your archives\";\n    let modifiedC = [...contacts];\n    let modifiedA = [...archiveChats];\n    let modifiedD = [...directMessages];\n    let modifiedChannels = [...userChannels];\n    let modifiedChatChannels = [...channels];\n    if (data.params.id && contacts.length !== 0) {\n      const contactIdx = (modifiedC || []).findIndex(\n        (c: any) => c.id + \"\" === data.params.id + \"\"\n      );\n      const channelIdx = (modifiedChannels || []).findIndex(\n        (c: any) => c.id + \"\" === data.params.id + \"\"\n      );\n      if (contactIdx > -1) {\n        if (contacts[contactIdx].isArchived) {\n          contacts[contactIdx].isArchived = false;\n          modifiedA = modifiedA.filter((f: any) => f.id !== data.params.id);\n          message = \"User has been removed to your archives\";\n        } else {\n          contacts[contactIdx].isArchived = true;\n          modifiedA = [...modifiedA, contacts[contactIdx]];\n          modifiedD = modifiedD.filter((c: any) => c.id !== data.params.id);\n        }\n      } else if (channelIdx > -1) {\n        if (userChannels[channelIdx].isArchived) {\n          userChannels[channelIdx].isArchived = false;\n          modifiedA = modifiedA.filter((f: any) => f.id !== data.params.id);\n          message = \"User has been removed to your archives\";\n        } else {\n          userChannels[channelIdx].isArchived = true;\n          modifiedA = [\n            ...modifiedA,\n            { ...userChannels[channelIdx], isChannel: true },\n          ];\n          modifiedChannels = modifiedChannels.filter(\n            (c: any) => c.id !== data.params.id\n          );\n          modifiedChatChannels = modifiedChatChannels.filter(\n            (c: any) => c.id !== data.params.id\n          );\n        }\n      }\n    }\n    onChangeContacts(contacts);\n    onChangeArchives(modifiedA);\n    onChangeDirectMessages(modifiedD);\n    onChangeUserChannels(modifiedChannels);\n    onChangeChannels(modifiedChatChannels);\n\n    return new Promise((resolve, reject) => {\n      if (data.params.id) {\n        setTimeout(() => {\n          resolve([200, message]);\n        });\n      } else {\n        reject([\"Internal Error!\"]);\n      }\n    });\n  });\n\n  mock.onPut(new RegExp(`${url.READ_CONVERSATION}/*`)).reply(config => {\n    const data = JSON.parse(config[\"data\"]);\n    let modifiedD = [...directMessages];\n    let modifiedF = [...favourites];\n    let modifiedC = [...channels];\n    if (data.params && data.params.id && conversations.length !== 0) {\n      /*\n     for chat conversations\n     */\n\n      const contactIdx = (modifiedD || []).findIndex(\n        (c: any) => c.id + \"\" === data.params.id + \"\"\n      );\n      const contactFIdx = (modifiedF || []).findIndex(\n        (c: any) => c.id + \"\" === data.params.id + \"\"\n      );\n      const contactCIdx = (modifiedC || []).findIndex(\n        (c: any) => c.id + \"\" === data.params.id + \"\"\n      );\n      if (contactIdx > -1 && modifiedD[contactIdx][\"meta\"]) {\n        modifiedD[contactIdx].meta!.unRead = 0;\n        onChangeDirectMessages(modifiedD);\n      }\n      if (contactFIdx > -1 && modifiedF[contactFIdx][\"meta\"]) {\n        modifiedF[contactFIdx].meta!.unRead = 0;\n        onChangeFavourite(modifiedF);\n      }\n      if (contactCIdx > -1 && modifiedC[contactCIdx][\"meta\"]) {\n        modifiedC[contactCIdx].meta!.unRead = 0;\n        onChangeChannels(modifiedC);\n      }\n    }\n\n    return new Promise((resolve, reject) => {\n      if (modifiedD) {\n        resolve([200, \"true\"]);\n      } else {\n        setTimeout(() => {\n          reject([\"Your id is not found\"]);\n        }, 500);\n      }\n    });\n  });\n\n  mock.onDelete(new RegExp(`${url.DELETE_IMAGE}/*`)).reply(config => {\n    const { params } = config;\n\n    return new Promise((resolve, reject) => {\n      if (params.userId && params.messageId && params.imageId) {\n        let modifiedC = [...conversations];\n        const conversationIdx = (modifiedC || []).findIndex(\n          (c: any) => c.userId + \"\" === params.userId + \"\"\n        );\n        if (conversationIdx > -1 && modifiedC[conversationIdx].messages) {\n          const mIdx = (modifiedC[conversationIdx].messages || []).findIndex(\n            (c: any) => c.mId + \"\" === params.messageId + \"\"\n          );\n          if (\n            mIdx > -1 &&\n            modifiedC[conversationIdx].messages[mIdx] &&\n            modifiedC[conversationIdx].messages[mIdx].image\n          ) {\n            if (modifiedC[conversationIdx].messages[mIdx].image?.length === 1) {\n              modifiedC[conversationIdx].messages = (\n                modifiedC[conversationIdx].messages || []\n              ).filter((m: any) => m.mId + \"\" !== params.messageId + \"\");\n            } else {\n              modifiedC[conversationIdx].messages[mIdx].image = modifiedC[\n                conversationIdx\n              ].messages[mIdx].image?.filter(\n                (m: any) => m.id + \"\" !== params.imageId + \"\"\n              );\n            }\n          }\n        }\n        onChangeConversations(modifiedC);\n        resolve([200, \"Message is Deleted!\"]);\n      } else {\n        reject([\"Your id is not found\"]);\n      }\n    });\n  });\n\n  mock.onPut(new RegExp(`${url.UPDATE_ETTINGS}/*`)).reply(config => {\n    const data = JSON.parse(config[\"data\"]);\n    const { field, value } = data;\n    const modifiedS: any = { ...settings };\n    modifiedS[field] = value;\n    onChangeSettings(modifiedS);\n\n    return new Promise((resolve, reject) => {\n      if (modifiedS) {\n        setTimeout(() => {\n          resolve([200, \"Setting Updated!\"]);\n        });\n      } else {\n        reject([\"Something went wrong!\"]);\n      }\n    });\n  });\n};\n\nexport default fakeBackend;\n"]},"metadata":{},"sourceType":"module"}