{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\"; // hooks\n\nimport { useRedux } from \"../hooks/index\"; // api\n\nimport { getLoggedinUser } from \"../api/apiCore\"; //utils\n\nimport { divideByKey } from \"../utils\";\n\nconst useProfile = () => {\n  _s();\n\n  // global store\n  const {\n    useAppSelector\n  } = useRedux();\n  const {\n    settings\n  } = useAppSelector(state => ({\n    settings: state.Settings.settings\n  }));\n  const image = settings.basicDetails && settings.basicDetails.profile;\n  const userProfileSession = getLoggedinUser();\n  const [loading] = useState(userProfileSession ? false : true);\n  const [userProfile, setUserProfile] = useState(userProfileSession ? { ...userProfileSession,\n    profileImage: image\n  } : null);\n  useEffect(() => {\n    const userProfileSession = getLoggedinUser();\n    setUserProfile(userProfileSession ? { ...userProfileSession,\n      profileImage: image\n    } : null);\n  }, [image]);\n  return {\n    userProfile,\n    loading\n  };\n};\n\n_s(useProfile, \"uXFkigubr/ZkJVdyFOfBv7rtlIQ=\", true, function () {\n  return [useRedux];\n});\n\nconst useContacts = () => {\n  _s2();\n\n  // global store\n  const {\n    useAppSelector\n  } = useRedux();\n  const {\n    contactsList\n  } = useAppSelector(state => ({\n    contactsList: state.Contacts.contacts\n  }));\n  const [contacts, setContacts] = useState([]);\n  const [categorizedContacts, setCategorizedContacts] = useState([]);\n  useEffect(() => {\n    if (contactsList.length > 0) {\n      setContacts(contactsList);\n    }\n  }, [contactsList]);\n  useEffect(() => {\n    if (contacts.length > 0) {\n      const formattedContacts = divideByKey(\"firstName\", contacts);\n      setCategorizedContacts(formattedContacts);\n    }\n  }, [contacts]);\n  const totalContacts = (categorizedContacts || []).length;\n  return {\n    categorizedContacts,\n    totalContacts\n  };\n};\n\n_s2(useContacts, \"/iu7Mm53Qp9w/xryWz0tOZlGDBk=\", true, function () {\n  return [useRedux];\n});\n\nconst useConversationUserType = () => {\n  _s3();\n\n  // global store\n  const {\n    useAppSelector\n  } = useRedux();\n  const {\n    chatUserDetails\n  } = useAppSelector(state => ({\n    chatUserDetails: state.Chats.chatUserDetails\n  }));\n  const [isChannel, setIsChannel] = useState(false);\n  useEffect(() => {\n    setIsChannel(chatUserDetails.isChannel ? true : false);\n  }, [chatUserDetails]);\n  return {\n    isChannel\n  };\n};\n\n_s3(useConversationUserType, \"1lKlgi7EKnag5Bx4fU1rBV9sykA=\", true, function () {\n  return [useRedux];\n});\n\nexport { useProfile, useContacts, useConversationUserType };","map":{"version":3,"sources":["/Users/huy8bit/Desktop/DRIVE/JOB/webchatFE/src/hooks/UserHooks.ts"],"names":["useState","useEffect","useRedux","getLoggedinUser","divideByKey","useProfile","useAppSelector","settings","state","Settings","image","basicDetails","profile","userProfileSession","loading","userProfile","setUserProfile","profileImage","useContacts","contactsList","Contacts","contacts","setContacts","categorizedContacts","setCategorizedContacts","length","formattedContacts","totalContacts","useConversationUserType","chatUserDetails","Chats","isChannel","setIsChannel"],"mappings":"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","sourcesContent":["import { useState, useEffect } from \"react\";\r\n\r\n// hooks\r\nimport { useRedux } from \"../hooks/index\";\r\n\r\n// api\r\nimport { getLoggedinUser } from \"../api/apiCore\";\r\n\r\n//utils\r\nimport { divideByKey } from \"../utils\";\r\n\r\nconst useProfile = () => {\r\n  // global store\r\n  const { useAppSelector } = useRedux();\r\n\r\n  const { settings } = useAppSelector(state => ({\r\n    settings: state.Settings.settings,\r\n  }));\r\n  const image = settings.basicDetails && settings.basicDetails.profile;\r\n  const userProfileSession = getLoggedinUser();\r\n  const [loading] = useState(userProfileSession ? false : true);\r\n  const [userProfile, setUserProfile] = useState(\r\n    userProfileSession ? { ...userProfileSession, profileImage: image } : null\r\n  );\r\n  useEffect(() => {\r\n    const userProfileSession = getLoggedinUser();\r\n    setUserProfile(\r\n      userProfileSession ? { ...userProfileSession, profileImage: image } : null\r\n    );\r\n  }, [image]);\r\n\r\n  return { userProfile, loading };\r\n};\r\n\r\nconst useContacts = () => {\r\n  // global store\r\n  const { useAppSelector } = useRedux();\r\n\r\n  const { contactsList } = useAppSelector(state => ({\r\n    contactsList: state.Contacts.contacts,\r\n  }));\r\n\r\n  const [contacts, setContacts] = useState<Array<any>>([]);\r\n  const [categorizedContacts, setCategorizedContacts] = useState<Array<any>>(\r\n    []\r\n  );\r\n  useEffect(() => {\r\n    if (contactsList.length > 0) {\r\n      setContacts(contactsList);\r\n    }\r\n  }, [contactsList]);\r\n\r\n  useEffect(() => {\r\n    if (contacts.length > 0) {\r\n      const formattedContacts = divideByKey(\"firstName\", contacts);\r\n      setCategorizedContacts(formattedContacts);\r\n    }\r\n  }, [contacts]);\r\n\r\n  const totalContacts = (categorizedContacts || []).length;\r\n  return { categorizedContacts, totalContacts };\r\n};\r\n\r\nconst useConversationUserType = () => {\r\n  // global store\r\n  const { useAppSelector } = useRedux();\r\n\r\n  const { chatUserDetails } = useAppSelector(state => ({\r\n    chatUserDetails: state.Chats.chatUserDetails,\r\n  }));\r\n\r\n  const [isChannel, setIsChannel] = useState<boolean>(false);\r\n  useEffect(() => {\r\n    setIsChannel(chatUserDetails.isChannel ? true : false);\r\n  }, [chatUserDetails]);\r\n\r\n  return { isChannel };\r\n};\r\nexport { useProfile, useContacts, useConversationUserType };\r\n"]},"metadata":{},"sourceType":"module"}