{"ast":null,"code":"const sortData = (field, data, dir) => {\n  let sortedRecord = [...data];\n\n  if (dir && dir === \"desc\") {\n    sortedRecord = sortedRecord.sort((a, b) => {\n      if (typeof b[field] === \"number\") {\n        return b[field] - a[field];\n      } else {\n        return (b[field] || \"\").toLowerCase() > (a[field] || \"\").toLowerCase() ? 1 : -1;\n      }\n    });\n  } else {\n    sortedRecord = sortedRecord.sort((a, b) => {\n      if (typeof b[field] === \"number\") {\n        return a[field] - b[field];\n      } else {\n        return (a[field] || \"\").toLowerCase() > (b[field] || \"\").toLowerCase() ? 1 : -1;\n      }\n    });\n  }\n\n  return sortedRecord;\n};\n\nconst groupByFields = (array, f) => {\n  /*\n    params description :\n        f : function which returnf the array of fields \n        e.g. :  (item) => {\n            return [itemField1, itemField2];\n        }\n         array : array of data to group e.g. : [{...}, {...}]       \n    */\n  var groups = {};\n  array.forEach(o => {\n    var group = JSON.stringify(f(o));\n    groups[group] = groups[group] || [];\n    groups[group].push(o);\n  });\n  return Object.keys(groups).map(group => {\n    return groups[group];\n  });\n};\n\nconst divideByKey = (field, array) => {\n  let map = array.reduce((p, c) => {\n    let char = c[field].charAt(0).toUpperCase();\n    p[char] = [].concat(p[char] || [], c);\n    return p;\n  }, {});\n  let result = Object.keys(map).map(k => ({\n    letter: k,\n    data: map[k]\n  }));\n  result = sortData(\"letter\", result);\n  return result;\n};\n\nexport { sortData, groupByFields, divideByKey };","map":{"version":3,"sources":["/Users/huy8bit/Desktop/DRIVE/JOB/webchatFE/src/utils/arrayutils.ts"],"names":["sortData","field","data","dir","sortedRecord","sort","a","b","toLowerCase","groupByFields","array","f","groups","forEach","o","group","JSON","stringify","push","Object","keys","map","divideByKey","reduce","p","c","char","charAt","toUpperCase","concat","result","k","letter"],"mappings":"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","sourcesContent":["const sortData = (field: string, data: Array<any>, dir?: string) => {\n  let sortedRecord = [...data];\n  if (dir && dir === \"desc\") {\n    sortedRecord = sortedRecord.sort((a: any, b: any) => {\n      if (typeof b[field] === \"number\") {\n        return b[field] - a[field];\n      } else {\n        return (b[field] || \"\").toLowerCase() > (a[field] || \"\").toLowerCase()\n          ? 1\n          : -1;\n      }\n    });\n  } else {\n    sortedRecord = sortedRecord.sort((a: any, b: any) => {\n      if (typeof b[field] === \"number\") {\n        return a[field] - b[field];\n      } else {\n        return (a[field] || \"\").toLowerCase() > (b[field] || \"\").toLowerCase()\n          ? 1\n          : -1;\n      }\n    });\n  }\n\n  return sortedRecord;\n};\n\nconst groupByFields = (array: any, f: any) => {\n  /*\n    params description :\n        f : function which returnf the array of fields \n        e.g. :  (item) => {\n            return [itemField1, itemField2];\n        }\n\n        array : array of data to group e.g. : [{...}, {...}]       \n    */\n\n  var groups: any = {};\n  array.forEach((o: any) => {\n    var group = JSON.stringify(f(o));\n    groups[group] = groups[group] || [];\n    groups[group].push(o);\n  });\n  return Object.keys(groups).map(group => {\n    return groups[group];\n  });\n};\nexport interface DivideByKeyResultTypes {\n  letter: string;\n  data: Array<any>;\n}\nconst divideByKey = (field: string, array: any) => {\n  let map = array.reduce((p: any, c: any) => {\n    let char = c[field].charAt(0).toUpperCase();\n    p[char] = [].concat(p[char] || [], c);\n    return p;\n  }, {});\n\n  let result = Object.keys(map).map(k => ({\n    letter: k,\n    data: map[k],\n  }));\n  result = sortData(\"letter\", result);\n  return result;\n};\nexport { sortData, groupByFields, divideByKey };\n"]},"metadata":{},"sourceType":"module"}