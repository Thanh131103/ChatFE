{"ast":null,"code":"var _jsxFileName = \"/Users/huy8bit/Desktop/DRIVE/JOB/webchatFE/src/pages/Dashboard/Settings/ThemeSettings.tsx\";\nimport React from \"react\"; // interface\n\n// components\nimport ThemeColor from \"./ThemeColor\";\nimport ThemeImage from \"./ThemeImage\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ThemeSettings = _ref => {\n  let {\n    theme,\n    onChangeData\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"accordion-body\",\n    children: [/*#__PURE__*/_jsxDEV(ThemeColor, {\n      theme: theme,\n      onChangeData: onChangeData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ThemeImage, {\n      theme: theme,\n      onChangeData: onChangeData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 5\n  }, this);\n};\n\n_c = ThemeSettings;\nexport default ThemeSettings;\n\nvar _c;\n\n$RefreshReg$(_c, \"ThemeSettings\");","map":{"version":3,"sources":["/Users/huy8bit/Desktop/DRIVE/JOB/webchatFE/src/pages/Dashboard/Settings/ThemeSettings.tsx"],"names":["React","ThemeColor","ThemeImage","ThemeSettings","theme","onChangeData"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CAEA;;AAGA;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,UAAP,MAAuB,cAAvB;;;AAMA,MAAMC,aAAa,GAAG,QAAiD;AAAA,MAAhD;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT,GAAgD;AACrE,sBACE;AAAK,IAAA,SAAS,EAAC,gBAAf;AAAA,4BACE,QAAC,UAAD;AAAY,MAAA,KAAK,EAAED,KAAnB;AAA0B,MAAA,YAAY,EAAEC;AAAxC;AAAA;AAAA;AAAA;AAAA,YADF,eAGE,QAAC,UAAD;AAAY,MAAA,KAAK,EAAED,KAAnB;AAA0B,MAAA,YAAY,EAAEC;AAAxC;AAAA;AAAA;AAAA;AAAA,YAHF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAOD,CARD;;KAAMF,a;AAUN,eAAeA,aAAf","sourcesContent":["import React from \"react\";\n\n// interface\nimport { ThemeTypes } from \"../../../data/settings\";\n\n// components\nimport ThemeColor from \"./ThemeColor\";\nimport ThemeImage from \"./ThemeImage\";\n\ninterface ThemeSettingsProps {\n  theme: ThemeTypes;\n  onChangeData: (field: string, value: any) => void;\n}\nconst ThemeSettings = ({ theme, onChangeData }: ThemeSettingsProps) => {\n  return (\n    <div className=\"accordion-body\">\n      <ThemeColor theme={theme} onChangeData={onChangeData} />\n\n      <ThemeImage theme={theme} onChangeData={onChangeData} />\n    </div>\n  );\n};\n\nexport default ThemeSettings;\n"]},"metadata":{},"sourceType":"module"}