{"ast":null,"code":"import { AuthForgetPassActionTypes } from \"./types\";\nexport const INIT_STATE = {\n  forgetSuccessMsg: null,\n  forgetError: null\n};\n\nconst ForgetPassword = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : INIT_STATE;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case AuthForgetPassActionTypes.API_RESPONSE_SUCCESS:\n      switch (action.payload.actionType) {\n        case AuthForgetPassActionTypes.FORGET_PASSWORD:\n          return { ...state,\n            forgetSuccessMsg: action.payload.data,\n            emailSended: true,\n            loading: false\n          };\n\n        case AuthForgetPassActionTypes.CHANGE_PASSWORD:\n          {\n            return { ...state,\n              passwordChanged: true,\n              loading: false\n            };\n          }\n\n        default:\n          return { ...state\n          };\n      }\n\n    case AuthForgetPassActionTypes.API_RESPONSE_ERROR:\n      switch (action.payload.actionType) {\n        case AuthForgetPassActionTypes.FORGET_PASSWORD:\n          return { ...state,\n            forgetError: action.payload.error,\n            emailSended: false,\n            loading: false\n          };\n\n        case AuthForgetPassActionTypes.CHANGE_PASSWORD:\n          {\n            return { ...state,\n              changepasswordError: action.payload.error,\n              passwordChanged: false,\n              loading: true\n            };\n          }\n\n        default:\n          return { ...state\n          };\n      }\n\n    case AuthForgetPassActionTypes.FORGET_PASSWORD:\n      {\n        return { ...state,\n          forgetSuccessMsg: null,\n          forgetError: null,\n          emailSended: false,\n          loading: true\n        };\n      }\n\n    case AuthForgetPassActionTypes.CHANGE_PASSWORD:\n      {\n        return { ...state,\n          passwordChanged: false,\n          loading: true\n        };\n      }\n\n    default:\n      return { ...state\n      };\n  }\n};\n\n_c = ForgetPassword;\nexport default ForgetPassword;\n\nvar _c;\n\n$RefreshReg$(_c, \"ForgetPassword\");","map":{"version":3,"sources":["/Users/huy8bit/Desktop/DRIVE/JOB/webchatFE/src/redux/auth/forgetpwd/reducer.ts"],"names":["AuthForgetPassActionTypes","INIT_STATE","forgetSuccessMsg","forgetError","ForgetPassword","state","action","type","API_RESPONSE_SUCCESS","payload","actionType","FORGET_PASSWORD","data","emailSended","loading","CHANGE_PASSWORD","passwordChanged","API_RESPONSE_ERROR","error","changepasswordError"],"mappings":"AAAA,SAASA,yBAAT,QAA+D,SAA/D;AAEA,OAAO,MAAMC,UAA+B,GAAG;AAC7CC,EAAAA,gBAAgB,EAAE,IAD2B;AAE7CC,EAAAA,WAAW,EAAE;AAFgC,CAAxC;;AAKP,MAAMC,cAAc,GAAG,YAAqC;AAAA,MAApCC,KAAoC,uEAA5BJ,UAA4B;AAAA,MAAhBK,MAAgB;;AAC1D,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKP,yBAAyB,CAACQ,oBAA/B;AACE,cAAQF,MAAM,CAACG,OAAP,CAAeC,UAAvB;AACE,aAAKV,yBAAyB,CAACW,eAA/B;AACE,iBAAO,EACL,GAAGN,KADE;AAELH,YAAAA,gBAAgB,EAAEI,MAAM,CAACG,OAAP,CAAeG,IAF5B;AAGLC,YAAAA,WAAW,EAAE,IAHR;AAILC,YAAAA,OAAO,EAAE;AAJJ,WAAP;;AAMF,aAAKd,yBAAyB,CAACe,eAA/B;AAAgD;AAC9C,mBAAO,EACL,GAAGV,KADE;AAELW,cAAAA,eAAe,EAAE,IAFZ;AAGLF,cAAAA,OAAO,EAAE;AAHJ,aAAP;AAKD;;AACD;AACE,iBAAO,EAAE,GAAGT;AAAL,WAAP;AAhBJ;;AAmBF,SAAKL,yBAAyB,CAACiB,kBAA/B;AACE,cAAQX,MAAM,CAACG,OAAP,CAAeC,UAAvB;AACE,aAAKV,yBAAyB,CAACW,eAA/B;AACE,iBAAO,EACL,GAAGN,KADE;AAELF,YAAAA,WAAW,EAAEG,MAAM,CAACG,OAAP,CAAeS,KAFvB;AAGLL,YAAAA,WAAW,EAAE,KAHR;AAILC,YAAAA,OAAO,EAAE;AAJJ,WAAP;;AAMF,aAAKd,yBAAyB,CAACe,eAA/B;AAAgD;AAC9C,mBAAO,EACL,GAAGV,KADE;AAELc,cAAAA,mBAAmB,EAAEb,MAAM,CAACG,OAAP,CAAeS,KAF/B;AAGLF,cAAAA,eAAe,EAAE,KAHZ;AAILF,cAAAA,OAAO,EAAE;AAJJ,aAAP;AAMD;;AAED;AACE,iBAAO,EAAE,GAAGT;AAAL,WAAP;AAlBJ;;AAqBF,SAAKL,yBAAyB,CAACW,eAA/B;AAAgD;AAC9C,eAAO,EACL,GAAGN,KADE;AAELH,UAAAA,gBAAgB,EAAE,IAFb;AAGLC,UAAAA,WAAW,EAAE,IAHR;AAILU,UAAAA,WAAW,EAAE,KAJR;AAKLC,UAAAA,OAAO,EAAE;AALJ,SAAP;AAOD;;AACD,SAAKd,yBAAyB,CAACe,eAA/B;AAAgD;AAC9C,eAAO,EACL,GAAGV,KADE;AAELW,UAAAA,eAAe,EAAE,KAFZ;AAGLF,UAAAA,OAAO,EAAE;AAHJ,SAAP;AAKD;;AAED;AACE,aAAO,EAAE,GAAGT;AAAL,OAAP;AA7DJ;AA+DD,CAhED;;KAAMD,c;AAkEN,eAAeA,cAAf","sourcesContent":["import { AuthForgetPassActionTypes, AuthForgetPassState } from \"./types\";\n\nexport const INIT_STATE: AuthForgetPassState = {\n  forgetSuccessMsg: null,\n  forgetError: null,\n};\n\nconst ForgetPassword = (state = INIT_STATE, action: any) => {\n  switch (action.type) {\n    case AuthForgetPassActionTypes.API_RESPONSE_SUCCESS:\n      switch (action.payload.actionType) {\n        case AuthForgetPassActionTypes.FORGET_PASSWORD:\n          return {\n            ...state,\n            forgetSuccessMsg: action.payload.data,\n            emailSended: true,\n            loading: false,\n          };\n        case AuthForgetPassActionTypes.CHANGE_PASSWORD: {\n          return {\n            ...state,\n            passwordChanged: true,\n            loading: false,\n          };\n        }\n        default:\n          return { ...state };\n      }\n\n    case AuthForgetPassActionTypes.API_RESPONSE_ERROR:\n      switch (action.payload.actionType) {\n        case AuthForgetPassActionTypes.FORGET_PASSWORD:\n          return {\n            ...state,\n            forgetError: action.payload.error,\n            emailSended: false,\n            loading: false,\n          };\n        case AuthForgetPassActionTypes.CHANGE_PASSWORD: {\n          return {\n            ...state,\n            changepasswordError: action.payload.error,\n            passwordChanged: false,\n            loading: true,\n          };\n        }\n\n        default:\n          return { ...state };\n      }\n\n    case AuthForgetPassActionTypes.FORGET_PASSWORD: {\n      return {\n        ...state,\n        forgetSuccessMsg: null,\n        forgetError: null,\n        emailSended: false,\n        loading: true,\n      };\n    }\n    case AuthForgetPassActionTypes.CHANGE_PASSWORD: {\n      return {\n        ...state,\n        passwordChanged: false,\n        loading: true,\n      };\n    }\n\n    default:\n      return { ...state };\n  }\n};\n\nexport default ForgetPassword;\n"]},"metadata":{},"sourceType":"module"}