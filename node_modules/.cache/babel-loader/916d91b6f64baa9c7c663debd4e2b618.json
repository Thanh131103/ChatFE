{"ast":null,"code":"import { takeEvery, fork, put, all, call } from \"redux-saga/effects\"; // Redux State\n\nimport { BookmarksActionTypes } from \"./types\"; // actions\n\nimport { bookmarksApiResponseSuccess, bookmarksApiResponseError } from \"./actions\"; // api\n\nimport { getBookmarks as getBookmarksApi, updateBookmark as updateBookmarkApi, deleteBookmark as deleteBookmarkApi } from \"../../api/index\"; // helpers\n\nimport { showSuccessNotification, showErrorNotification } from \"../../helpers/notifications\";\n\nfunction* getBookmarks() {\n  try {\n    const response = yield call(getBookmarksApi);\n    yield put(bookmarksApiResponseSuccess(BookmarksActionTypes.GET_BOOKMARKS, response));\n  } catch (error) {\n    yield put(bookmarksApiResponseError(BookmarksActionTypes.GET_BOOKMARKS, error));\n  }\n}\n\nfunction* updateBookmark(_ref) {\n  let {\n    payload: {\n      id,\n      data\n    }\n  } = _ref;\n\n  try {\n    const response = yield call(updateBookmarkApi, id, data);\n    yield put(bookmarksApiResponseSuccess(BookmarksActionTypes.UPDATE_BOOKMARK, response));\n    yield call(showSuccessNotification, response + \"\");\n  } catch (error) {\n    yield call(showErrorNotification, error);\n    yield put(bookmarksApiResponseError(BookmarksActionTypes.UPDATE_BOOKMARK, error));\n  }\n}\n\nfunction* deleteBookmark(_ref2) {\n  let {\n    payload: id\n  } = _ref2;\n\n  try {\n    const response = yield call(deleteBookmarkApi, id);\n    yield put(bookmarksApiResponseSuccess(BookmarksActionTypes.DELETE_BOOKMARK, response));\n    yield call(showSuccessNotification, response + \"\");\n  } catch (error) {\n    yield call(showErrorNotification, error);\n    yield put(bookmarksApiResponseError(BookmarksActionTypes.DELETE_BOOKMARK, error));\n  }\n}\n\nexport function* watchGetCalls() {\n  yield takeEvery(BookmarksActionTypes.GET_BOOKMARKS, getBookmarks);\n}\nexport function* watchUpdateBookmark() {\n  yield takeEvery(BookmarksActionTypes.UPDATE_BOOKMARK, updateBookmark);\n}\nexport function* watchDeleteBookmark() {\n  yield takeEvery(BookmarksActionTypes.DELETE_BOOKMARK, deleteBookmark);\n}\n\nfunction* bookmarksSaga() {\n  yield all([fork(watchGetCalls), fork(watchUpdateBookmark), fork(watchDeleteBookmark)]);\n}\n\nexport default bookmarksSaga;","map":{"version":3,"sources":["/Users/huy8bit/Desktop/DRIVE/JOB/webchatFE/src/redux/bookmarks/saga.ts"],"names":["takeEvery","fork","put","all","call","BookmarksActionTypes","bookmarksApiResponseSuccess","bookmarksApiResponseError","getBookmarks","getBookmarksApi","updateBookmark","updateBookmarkApi","deleteBookmark","deleteBookmarkApi","showSuccessNotification","showErrorNotification","response","GET_BOOKMARKS","error","payload","id","data","UPDATE_BOOKMARK","DELETE_BOOKMARK","watchGetCalls","watchUpdateBookmark","watchDeleteBookmark","bookmarksSaga"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,IAApB,EAA0BC,GAA1B,EAA+BC,GAA/B,EAAoCC,IAApC,QAAgD,oBAAhD,C,CAEA;;AACA,SAASC,oBAAT,QAAqC,SAArC,C,CAEA;;AACA,SACEC,2BADF,EAEEC,yBAFF,QAGO,WAHP,C,CAKA;;AACA,SACEC,YAAY,IAAIC,eADlB,EAEEC,cAAc,IAAIC,iBAFpB,EAGEC,cAAc,IAAIC,iBAHpB,QAIO,iBAJP,C,CAMA;;AACA,SACEC,uBADF,EAEEC,qBAFF,QAGO,6BAHP;;AAKA,UAAUP,YAAV,GAAyB;AACvB,MAAI;AACF,UAAMQ,QAAsB,GAAG,MAAMZ,IAAI,CAACK,eAAD,CAAzC;AACA,UAAMP,GAAG,CACPI,2BAA2B,CAACD,oBAAoB,CAACY,aAAtB,EAAqCD,QAArC,CADpB,CAAT;AAGD,GALD,CAKE,OAAOE,KAAP,EAAmB;AACnB,UAAMhB,GAAG,CACPK,yBAAyB,CAACF,oBAAoB,CAACY,aAAtB,EAAqCC,KAArC,CADlB,CAAT;AAGD;AACF;;AAED,UAAUR,cAAV,OAAyD;AAAA,MAAhC;AAAES,IAAAA,OAAO,EAAE;AAAEC,MAAAA,EAAF;AAAMC,MAAAA;AAAN;AAAX,GAAgC;;AACvD,MAAI;AACF,UAAML,QAAsB,GAAG,MAAMZ,IAAI,CAACO,iBAAD,EAAoBS,EAApB,EAAwBC,IAAxB,CAAzC;AACA,UAAMnB,GAAG,CACPI,2BAA2B,CACzBD,oBAAoB,CAACiB,eADI,EAEzBN,QAFyB,CADpB,CAAT;AAMA,UAAMZ,IAAI,CAACU,uBAAD,EAA0BE,QAAQ,GAAG,EAArC,CAAV;AACD,GATD,CASE,OAAOE,KAAP,EAAmB;AACnB,UAAMd,IAAI,CAACW,qBAAD,EAAwBG,KAAxB,CAAV;AACA,UAAMhB,GAAG,CACPK,yBAAyB,CAACF,oBAAoB,CAACiB,eAAtB,EAAuCJ,KAAvC,CADlB,CAAT;AAGD;AACF;;AAED,UAAUN,cAAV,QAA+C;AAAA,MAAtB;AAAEO,IAAAA,OAAO,EAAEC;AAAX,GAAsB;;AAC7C,MAAI;AACF,UAAMJ,QAAsB,GAAG,MAAMZ,IAAI,CAACS,iBAAD,EAAoBO,EAApB,CAAzC;AACA,UAAMlB,GAAG,CACPI,2BAA2B,CACzBD,oBAAoB,CAACkB,eADI,EAEzBP,QAFyB,CADpB,CAAT;AAMA,UAAMZ,IAAI,CAACU,uBAAD,EAA0BE,QAAQ,GAAG,EAArC,CAAV;AACD,GATD,CASE,OAAOE,KAAP,EAAmB;AACnB,UAAMd,IAAI,CAACW,qBAAD,EAAwBG,KAAxB,CAAV;AACA,UAAMhB,GAAG,CACPK,yBAAyB,CAACF,oBAAoB,CAACkB,eAAtB,EAAuCL,KAAvC,CADlB,CAAT;AAGD;AACF;;AAED,OAAO,UAAUM,aAAV,GAA0B;AAC/B,QAAMxB,SAAS,CAACK,oBAAoB,CAACY,aAAtB,EAAqCT,YAArC,CAAf;AACD;AAED,OAAO,UAAUiB,mBAAV,GAAgC;AACrC,QAAMzB,SAAS,CAACK,oBAAoB,CAACiB,eAAtB,EAAuCZ,cAAvC,CAAf;AACD;AACD,OAAO,UAAUgB,mBAAV,GAAgC;AACrC,QAAM1B,SAAS,CAACK,oBAAoB,CAACkB,eAAtB,EAAuCX,cAAvC,CAAf;AACD;;AACD,UAAUe,aAAV,GAA0B;AACxB,QAAMxB,GAAG,CAAC,CACRF,IAAI,CAACuB,aAAD,CADI,EAERvB,IAAI,CAACwB,mBAAD,CAFI,EAGRxB,IAAI,CAACyB,mBAAD,CAHI,CAAD,CAAT;AAKD;;AAED,eAAeC,aAAf","sourcesContent":["import { takeEvery, fork, put, all, call } from \"redux-saga/effects\";\n\n// Redux State\nimport { BookmarksActionTypes } from \"./types\";\n\n// actions\nimport {\n  bookmarksApiResponseSuccess,\n  bookmarksApiResponseError,\n} from \"./actions\";\n\n// api\nimport {\n  getBookmarks as getBookmarksApi,\n  updateBookmark as updateBookmarkApi,\n  deleteBookmark as deleteBookmarkApi,\n} from \"../../api/index\";\n\n// helpers\nimport {\n  showSuccessNotification,\n  showErrorNotification,\n} from \"../../helpers/notifications\";\n\nfunction* getBookmarks() {\n  try {\n    const response: Promise<any> = yield call(getBookmarksApi);\n    yield put(\n      bookmarksApiResponseSuccess(BookmarksActionTypes.GET_BOOKMARKS, response)\n    );\n  } catch (error: any) {\n    yield put(\n      bookmarksApiResponseError(BookmarksActionTypes.GET_BOOKMARKS, error)\n    );\n  }\n}\n\nfunction* updateBookmark({ payload: { id, data } }: any) {\n  try {\n    const response: Promise<any> = yield call(updateBookmarkApi, id, data);\n    yield put(\n      bookmarksApiResponseSuccess(\n        BookmarksActionTypes.UPDATE_BOOKMARK,\n        response\n      )\n    );\n    yield call(showSuccessNotification, response + \"\");\n  } catch (error: any) {\n    yield call(showErrorNotification, error);\n    yield put(\n      bookmarksApiResponseError(BookmarksActionTypes.UPDATE_BOOKMARK, error)\n    );\n  }\n}\n\nfunction* deleteBookmark({ payload: id }: any) {\n  try {\n    const response: Promise<any> = yield call(deleteBookmarkApi, id);\n    yield put(\n      bookmarksApiResponseSuccess(\n        BookmarksActionTypes.DELETE_BOOKMARK,\n        response\n      )\n    );\n    yield call(showSuccessNotification, response + \"\");\n  } catch (error: any) {\n    yield call(showErrorNotification, error);\n    yield put(\n      bookmarksApiResponseError(BookmarksActionTypes.DELETE_BOOKMARK, error)\n    );\n  }\n}\n\nexport function* watchGetCalls() {\n  yield takeEvery(BookmarksActionTypes.GET_BOOKMARKS, getBookmarks);\n}\n\nexport function* watchUpdateBookmark() {\n  yield takeEvery(BookmarksActionTypes.UPDATE_BOOKMARK, updateBookmark);\n}\nexport function* watchDeleteBookmark() {\n  yield takeEvery(BookmarksActionTypes.DELETE_BOOKMARK, deleteBookmark);\n}\nfunction* bookmarksSaga() {\n  yield all([\n    fork(watchGetCalls),\n    fork(watchUpdateBookmark),\n    fork(watchDeleteBookmark),\n  ]);\n}\n\nexport default bookmarksSaga;\n"]},"metadata":{},"sourceType":"module"}