{"ast":null,"code":"// @flow\nimport { all, call, fork, takeEvery } from \"redux-saga/effects\";\nimport { LayoutActionTypes } from \"./types\";\nimport { LAYOUT_MODES } from \"../../constants/index\";\n/**\n * Changes the body attribute\n */\n\nfunction changeBodyAttribute(attribute, value) {\n  if (document.body) document.body.setAttribute(attribute, value);\n  return true;\n}\n/**\n * Changes the layout mode\n * @param {*} param0\n */\n\n\nfunction* changelayoutMode(_ref) {\n  let {\n    payload: {\n      layoutMode\n    }\n  } = _ref;\n\n  try {\n    if (layoutMode === LAYOUT_MODES.LIGHT) {\n      yield call(changeBodyAttribute, \"data-layout-mode\", layoutMode);\n      localStorage.setItem(\"layoutMode\", layoutMode);\n    } else if (layoutMode === LAYOUT_MODES.DARK) {\n      yield call(changeBodyAttribute, \"data-layout-mode\", layoutMode);\n      localStorage.setItem(\"layoutMode\", layoutMode);\n    }\n  } catch (error) {}\n}\n/**\n * Watchers\n */\n\n\nexport function* watchChangelayoutMode() {\n  yield takeEvery(LayoutActionTypes.CHANGE_LAYOUT_MODE, changelayoutMode);\n}\n\nfunction* LayoutSaga() {\n  yield all([fork(watchChangelayoutMode)]);\n}\n\n_c = LayoutSaga;\nexport default LayoutSaga;\n\nvar _c;\n\n$RefreshReg$(_c, \"LayoutSaga\");","map":{"version":3,"sources":["/Users/huy8bit/Desktop/DRIVE/JOB/webchatFE/src/redux/layout/saga.ts"],"names":["all","call","fork","takeEvery","LayoutActionTypes","LAYOUT_MODES","changeBodyAttribute","attribute","value","document","body","setAttribute","changelayoutMode","payload","layoutMode","LIGHT","localStorage","setItem","DARK","error","watchChangelayoutMode","CHANGE_LAYOUT_MODE","LayoutSaga"],"mappings":"AAAA;AACA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,IAApB,EAA0BC,SAA1B,QAA2C,oBAA3C;AAEA,SAASC,iBAAT,QAAkC,SAAlC;AACA,SAASC,YAAT,QAA6B,uBAA7B;AAEA;AACA;AACA;;AACA,SAASC,mBAAT,CAA6BC,SAA7B,EAA6CC,KAA7C,EAAyD;AACvD,MAAIC,QAAQ,CAACC,IAAb,EAAmBD,QAAQ,CAACC,IAAT,CAAcC,YAAd,CAA2BJ,SAA3B,EAAsCC,KAAtC;AACnB,SAAO,IAAP;AACD;AAED;AACA;AACA;AACA;;;AACC,UAAUI,gBAAV,OAA8D;AAAA,MAAnC;AAAEC,IAAAA,OAAO,EAAE;AAAEC,MAAAA;AAAF;AAAX,GAAmC;;AAC7D,MAAI;AACF,QAAIA,UAAU,KAAKT,YAAY,CAACU,KAAhC,EAAuC;AACrC,YAAMd,IAAI,CAACK,mBAAD,EAAsB,kBAAtB,EAA0CQ,UAA1C,CAAV;AACAE,MAAAA,YAAY,CAACC,OAAb,CAAqB,YAArB,EAAmCH,UAAnC;AACD,KAHD,MAGO,IAAIA,UAAU,KAAKT,YAAY,CAACa,IAAhC,EAAsC;AAC3C,YAAMjB,IAAI,CAACK,mBAAD,EAAsB,kBAAtB,EAA0CQ,UAA1C,CAAV;AACAE,MAAAA,YAAY,CAACC,OAAb,CAAqB,YAArB,EAAmCH,UAAnC;AACD;AACF,GARD,CAQE,OAAOK,KAAP,EAAc,CAAG;AACpB;AAED;AACA;AACA;;;AACA,OAAO,UAAUC,qBAAV,GAAkC;AACvC,QAAMjB,SAAS,CAACC,iBAAiB,CAACiB,kBAAnB,EAAuCT,gBAAvC,CAAf;AACD;;AAED,UAAUU,UAAV,GAAuB;AACrB,QAAMtB,GAAG,CAAC,CACRE,IAAI,CAACkB,qBAAD,CADI,CAAD,CAAT;AAGD;;KAJSE,U;AAMV,eAAeA,UAAf","sourcesContent":["// @flow\nimport { all, call, fork, takeEvery } from \"redux-saga/effects\";\n\nimport { LayoutActionTypes } from \"./types\";\nimport { LAYOUT_MODES } from \"../../constants/index\";\n\n/**\n * Changes the body attribute\n */\nfunction changeBodyAttribute(attribute: any, value: any) {\n  if (document.body) document.body.setAttribute(attribute, value);\n  return true;\n}\n\n/**\n * Changes the layout mode\n * @param {*} param0\n */\n function* changelayoutMode({ payload: { layoutMode } } : any) {\n  try {\n    if (layoutMode === LAYOUT_MODES.LIGHT) {\n      yield call(changeBodyAttribute, \"data-layout-mode\", layoutMode);\n      localStorage.setItem(\"layoutMode\", layoutMode);\n    } else if (layoutMode === LAYOUT_MODES.DARK) {\n      yield call(changeBodyAttribute, \"data-layout-mode\", layoutMode);\n      localStorage.setItem(\"layoutMode\", layoutMode);\n    }\n  } catch (error) { }\n}\n\n/**\n * Watchers\n */\nexport function* watchChangelayoutMode() {\n  yield takeEvery(LayoutActionTypes.CHANGE_LAYOUT_MODE, changelayoutMode);\n}\n\nfunction* LayoutSaga() {\n  yield all([\n    fork(watchChangelayoutMode),\n  ]);\n}\n\nexport default LayoutSaga;\n"]},"metadata":{},"sourceType":"module"}