{"ast":null,"code":"var _jsxFileName = \"/Users/huy8bit/Desktop/DRIVE/JOB/webchatFE/src/pages/Dashboard/ConversationUser/index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\"; // hooks\n\nimport { useRedux } from \"../../../hooks/index\"; // actions\n\nimport { toggleUserDetailsTab, getChatUserConversations, onSendMessage, receiveMessage, readMessage, receiveMessageFromUser, deleteMessage, deleteUserMessages, toggleArchiveContact } from \"../../../redux/actions\"; // hooks\n\nimport { useProfile } from \"../../../hooks\"; // components\n\nimport UserHead from \"./UserHead\";\nimport Conversation from \"./Conversation\";\nimport ChatInputSection from \"./ChatInputSection/index\"; // interface\n\n// dummy data\nimport { pinnedTabs } from \"../../../data/index\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Index = _ref => {\n  _s();\n\n  let {\n    isChannel\n  } = _ref;\n  // global store\n  const {\n    dispatch,\n    useAppSelector\n  } = useRedux();\n  const {\n    chatUserDetails,\n    chatUserConversations,\n    isUserMessageSent,\n    isMessageDeleted,\n    isMessageForwarded,\n    isUserMessagesDeleted,\n    isImageDeleted\n  } = useAppSelector(state => ({\n    chatUserDetails: state.Chats.chatUserDetails,\n    chatUserConversations: state.Chats.chatUserConversations,\n    isUserMessageSent: state.Chats.isUserMessageSent,\n    isMessageDeleted: state.Chats.isMessageDeleted,\n    isMessageForwarded: state.Chats.isMessageForwarded,\n    isUserMessagesDeleted: state.Chats.isUserMessagesDeleted,\n    isImageDeleted: state.Chats.isImageDeleted\n  }));\n\n  const onOpenUserDetails = () => {\n    dispatch(toggleUserDetailsTab(true));\n  };\n  /*\n  hooks\n  */\n\n\n  const {\n    userProfile\n  } = useProfile();\n  /*\n  reply handeling\n  */\n\n  const [replyData, setReplyData] = useState();\n\n  const onSetReplyData = reply => {\n    setReplyData(reply);\n  };\n  /*\n  send message\n  */\n\n\n  const onSend = data => {\n    let params = {\n      text: data.text && data.text,\n      time: new Date().toISOString(),\n      image: data.image && data.image,\n      attachments: data.attachments && data.attachments,\n      meta: {\n        receiver: chatUserDetails.id,\n        sender: userProfile.uid\n      }\n    };\n\n    if (replyData && replyData !== null) {\n      params[\"replyOf\"] = replyData;\n    }\n\n    dispatch(onSendMessage(params));\n\n    if (!isChannel) {\n      setTimeout(() => {\n        dispatch(receiveMessage(chatUserDetails.id));\n      }, 1000);\n      setTimeout(() => {\n        dispatch(readMessage(chatUserDetails.id));\n      }, 1500);\n      setTimeout(() => {\n        dispatch(receiveMessageFromUser(chatUserDetails.id));\n      }, 2000);\n    }\n\n    setReplyData(null);\n  };\n\n  useEffect(() => {\n    if (isUserMessageSent || isMessageDeleted || isMessageForwarded || isUserMessagesDeleted || isImageDeleted) {\n      dispatch(getChatUserConversations(chatUserDetails.id));\n    }\n  }, [dispatch, isUserMessageSent, chatUserDetails, isMessageDeleted, isMessageForwarded, isUserMessagesDeleted, isImageDeleted]);\n\n  const onDeleteMessage = messageId => {\n    dispatch(deleteMessage(chatUserDetails.id, messageId));\n  };\n\n  const onDeleteUserMessages = () => {\n    dispatch(deleteUserMessages(chatUserDetails.id));\n  };\n\n  const onToggleArchive = () => {\n    dispatch(toggleArchiveContact(chatUserDetails.id));\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(UserHead, {\n      chatUserDetails: chatUserDetails,\n      pinnedTabs: pinnedTabs,\n      onOpenUserDetails: onOpenUserDetails,\n      onDelete: onDeleteUserMessages,\n      isChannel: isChannel,\n      onToggleArchive: onToggleArchive\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Conversation, {\n      chatUserConversations: chatUserConversations,\n      chatUserDetails: chatUserDetails,\n      onDelete: onDeleteMessage,\n      onSetReplyData: onSetReplyData,\n      isChannel: isChannel\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ChatInputSection, {\n      onSend: onSend,\n      replyData: replyData,\n      onSetReplyData: onSetReplyData,\n      chatUserDetails: chatUserDetails\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Index, \"5dz5o6e//FxPg5j/yXP27taPMFQ=\", true, function () {\n  return [useRedux, useProfile];\n});\n\n_c = Index;\nexport default Index;\n\nvar _c;\n\n$RefreshReg$(_c, \"Index\");","map":{"version":3,"sources":["/Users/huy8bit/Desktop/DRIVE/JOB/webchatFE/src/pages/Dashboard/ConversationUser/index.tsx"],"names":["React","useEffect","useState","useRedux","toggleUserDetailsTab","getChatUserConversations","onSendMessage","receiveMessage","readMessage","receiveMessageFromUser","deleteMessage","deleteUserMessages","toggleArchiveContact","useProfile","UserHead","Conversation","ChatInputSection","pinnedTabs","Index","isChannel","dispatch","useAppSelector","chatUserDetails","chatUserConversations","isUserMessageSent","isMessageDeleted","isMessageForwarded","isUserMessagesDeleted","isImageDeleted","state","Chats","onOpenUserDetails","userProfile","replyData","setReplyData","onSetReplyData","reply","onSend","data","params","text","time","Date","toISOString","image","attachments","meta","receiver","id","sender","uid","setTimeout","onDeleteMessage","messageId","onDeleteUserMessages","onToggleArchive"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\n\n// hooks\nimport { useRedux } from \"../../../hooks/index\";\n\n// actions\nimport {\n  toggleUserDetailsTab,\n  getChatUserConversations,\n  onSendMessage,\n  receiveMessage,\n  readMessage,\n  receiveMessageFromUser,\n  deleteMessage,\n  deleteUserMessages,\n  toggleArchiveContact,\n} from \"../../../redux/actions\";\n\n// hooks\nimport { useProfile } from \"../../../hooks\";\n\n// components\nimport UserHead from \"./UserHead\";\nimport Conversation from \"./Conversation\";\nimport ChatInputSection from \"./ChatInputSection/index\";\n\n// interface\nimport { MessagesTypes } from \"../../../data/messages\";\n\n// dummy data\nimport { pinnedTabs } from \"../../../data/index\";\n\ninterface IndexProps {\n  isChannel: boolean;\n}\nconst Index = ({ isChannel }: IndexProps) => {\n  // global store\n  const { dispatch, useAppSelector } = useRedux();\n\n  const {\n    chatUserDetails,\n    chatUserConversations,\n    isUserMessageSent,\n    isMessageDeleted,\n    isMessageForwarded,\n    isUserMessagesDeleted,\n    isImageDeleted,\n  } = useAppSelector(state => ({\n    chatUserDetails: state.Chats.chatUserDetails,\n    chatUserConversations: state.Chats.chatUserConversations,\n    isUserMessageSent: state.Chats.isUserMessageSent,\n    isMessageDeleted: state.Chats.isMessageDeleted,\n    isMessageForwarded: state.Chats.isMessageForwarded,\n    isUserMessagesDeleted: state.Chats.isUserMessagesDeleted,\n    isImageDeleted: state.Chats.isImageDeleted,\n  }));\n\n  const onOpenUserDetails = () => {\n    dispatch(toggleUserDetailsTab(true));\n  };\n\n  /*\n  hooks\n  */\n  const { userProfile } = useProfile();\n\n  /*\n  reply handeling\n  */\n  const [replyData, setReplyData] = useState<\n    null | MessagesTypes | undefined\n  >();\n  const onSetReplyData = (reply: null | MessagesTypes | undefined) => {\n    setReplyData(reply);\n  };\n\n  /*\n  send message\n  */\n  const onSend = (data: any) => {\n    let params: any = {\n      text: data.text && data.text,\n      time: new Date().toISOString(),\n      image: data.image && data.image,\n      attachments: data.attachments && data.attachments,\n      meta: {\n        receiver: chatUserDetails.id,\n        sender: userProfile.uid,\n      },\n    };\n    if (replyData && replyData !== null) {\n      params[\"replyOf\"] = replyData;\n    }\n\n    dispatch(onSendMessage(params));\n    if (!isChannel) {\n      setTimeout(() => {\n        dispatch(receiveMessage(chatUserDetails.id));\n      }, 1000);\n      setTimeout(() => {\n        dispatch(readMessage(chatUserDetails.id));\n      }, 1500);\n      setTimeout(() => {\n        dispatch(receiveMessageFromUser(chatUserDetails.id));\n      }, 2000);\n    }\n    setReplyData(null);\n  };\n\n  useEffect(() => {\n    if (\n      isUserMessageSent ||\n      isMessageDeleted ||\n      isMessageForwarded ||\n      isUserMessagesDeleted ||\n      isImageDeleted\n    ) {\n      dispatch(getChatUserConversations(chatUserDetails.id));\n    }\n  }, [\n    dispatch,\n    isUserMessageSent,\n    chatUserDetails,\n    isMessageDeleted,\n    isMessageForwarded,\n    isUserMessagesDeleted,\n    isImageDeleted,\n  ]);\n\n  const onDeleteMessage = (messageId: string | number) => {\n    dispatch(deleteMessage(chatUserDetails.id, messageId));\n  };\n\n  const onDeleteUserMessages = () => {\n    dispatch(deleteUserMessages(chatUserDetails.id));\n  };\n\n  const onToggleArchive = () => {\n    dispatch(toggleArchiveContact(chatUserDetails.id));\n  };\n\n  return (\n    <>\n      <UserHead\n        chatUserDetails={chatUserDetails}\n        pinnedTabs={pinnedTabs}\n        onOpenUserDetails={onOpenUserDetails}\n        onDelete={onDeleteUserMessages}\n        isChannel={isChannel}\n        onToggleArchive={onToggleArchive}\n      />\n      <Conversation\n        chatUserConversations={chatUserConversations}\n        chatUserDetails={chatUserDetails}\n        onDelete={onDeleteMessage}\n        onSetReplyData={onSetReplyData}\n        isChannel={isChannel}\n      />\n      <ChatInputSection\n        onSend={onSend}\n        replyData={replyData}\n        onSetReplyData={onSetReplyData}\n        chatUserDetails={chatUserDetails}\n      />\n    </>\n  );\n};\n\nexport default Index;\n"]},"metadata":{},"sourceType":"module"}