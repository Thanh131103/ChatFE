{"ast":null,"code":"import { takeEvery, fork, put, all, call } from \"redux-saga/effects\"; //  Redux States\n\nimport { ContactsActionTypes } from \"./types\";\nimport { contactsApiResponseSuccess, contactsApiResponseError } from \"./actions\"; // api\n\nimport { getContacts as getContactsApi, inviteContact as inviteContactApi } from \"../../api/index\"; // helpers\n\nimport { showSuccessNotification, showErrorNotification } from \"../../helpers/notifications\";\n\nfunction* getContacts(_ref) {\n  let {\n    payload: filters\n  } = _ref;\n\n  try {\n    const response = yield call(getContactsApi, filters);\n    yield put(contactsApiResponseSuccess(ContactsActionTypes.GET_CONTACTS, response));\n  } catch (error) {\n    yield put(contactsApiResponseError(ContactsActionTypes.GET_CONTACTS, error));\n  }\n}\n\nfunction* inviteContact(_ref2) {\n  let {\n    payload: newPassword\n  } = _ref2;\n\n  try {\n    const response = yield call(inviteContactApi, newPassword);\n    yield put(contactsApiResponseSuccess(ContactsActionTypes.INVITE_CONTACT, response));\n    yield call(showSuccessNotification, response + \"\");\n  } catch (error) {\n    yield call(showErrorNotification, error);\n    yield put(contactsApiResponseError(ContactsActionTypes.INVITE_CONTACT, error));\n  }\n}\n\nexport function* watchGetContacts() {\n  yield takeEvery(ContactsActionTypes.GET_CONTACTS, getContacts);\n}\nexport function* watchInviteContact() {\n  yield takeEvery(ContactsActionTypes.INVITE_CONTACT, inviteContact);\n}\n\nfunction* contactsSaga() {\n  yield all([fork(watchGetContacts), fork(watchInviteContact)]);\n}\n\nexport default contactsSaga;","map":{"version":3,"sources":["/Users/huy8bit/Desktop/DRIVE/JOB/webchatFE/src/redux/contacts/saga.ts"],"names":["takeEvery","fork","put","all","call","ContactsActionTypes","contactsApiResponseSuccess","contactsApiResponseError","getContacts","getContactsApi","inviteContact","inviteContactApi","showSuccessNotification","showErrorNotification","payload","filters","response","GET_CONTACTS","error","newPassword","INVITE_CONTACT","watchGetContacts","watchInviteContact","contactsSaga"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,IAApB,EAA0BC,GAA1B,EAA+BC,GAA/B,EAAoCC,IAApC,QAAgD,oBAAhD,C,CAEA;;AACA,SAASC,mBAAT,QAAoC,SAApC;AACA,SACEC,0BADF,EAEEC,wBAFF,QAGO,WAHP,C,CAKA;;AACA,SACEC,WAAW,IAAIC,cADjB,EAEEC,aAAa,IAAIC,gBAFnB,QAGO,iBAHP,C,CAKA;;AACA,SACEC,uBADF,EAEEC,qBAFF,QAGO,6BAHP;;AAKA,UAAUL,WAAV,OAAiD;AAAA,MAA3B;AAAEM,IAAAA,OAAO,EAAEC;AAAX,GAA2B;;AAC/C,MAAI;AACF,UAAMC,QAAsB,GAAG,MAAMZ,IAAI,CAACK,cAAD,EAAiBM,OAAjB,CAAzC;AACA,UAAMb,GAAG,CACPI,0BAA0B,CAACD,mBAAmB,CAACY,YAArB,EAAmCD,QAAnC,CADnB,CAAT;AAGD,GALD,CAKE,OAAOE,KAAP,EAAmB;AACnB,UAAMhB,GAAG,CACPK,wBAAwB,CAACF,mBAAmB,CAACY,YAArB,EAAmCC,KAAnC,CADjB,CAAT;AAGD;AACF;;AAED,UAAUR,aAAV,QAAuD;AAAA,MAA/B;AAAEI,IAAAA,OAAO,EAAEK;AAAX,GAA+B;;AACrD,MAAI;AACF,UAAMH,QAAsB,GAAG,MAAMZ,IAAI,CAACO,gBAAD,EAAmBQ,WAAnB,CAAzC;AACA,UAAMjB,GAAG,CACPI,0BAA0B,CAACD,mBAAmB,CAACe,cAArB,EAAqCJ,QAArC,CADnB,CAAT;AAGA,UAAMZ,IAAI,CAACQ,uBAAD,EAA0BI,QAAQ,GAAG,EAArC,CAAV;AACD,GAND,CAME,OAAOE,KAAP,EAAmB;AACnB,UAAMd,IAAI,CAACS,qBAAD,EAAwBK,KAAxB,CAAV;AACA,UAAMhB,GAAG,CACPK,wBAAwB,CAACF,mBAAmB,CAACe,cAArB,EAAqCF,KAArC,CADjB,CAAT;AAGD;AACF;;AAED,OAAO,UAAUG,gBAAV,GAA6B;AAClC,QAAMrB,SAAS,CAACK,mBAAmB,CAACY,YAArB,EAAmCT,WAAnC,CAAf;AACD;AAED,OAAO,UAAUc,kBAAV,GAA+B;AACpC,QAAMtB,SAAS,CAACK,mBAAmB,CAACe,cAArB,EAAqCV,aAArC,CAAf;AACD;;AAED,UAAUa,YAAV,GAAyB;AACvB,QAAMpB,GAAG,CAAC,CAACF,IAAI,CAACoB,gBAAD,CAAL,EAAyBpB,IAAI,CAACqB,kBAAD,CAA7B,CAAD,CAAT;AACD;;AAED,eAAeC,YAAf","sourcesContent":["import { takeEvery, fork, put, all, call } from \"redux-saga/effects\";\n\n//  Redux States\nimport { ContactsActionTypes } from \"./types\";\nimport {\n  contactsApiResponseSuccess,\n  contactsApiResponseError,\n} from \"./actions\";\n\n// api\nimport {\n  getContacts as getContactsApi,\n  inviteContact as inviteContactApi,\n} from \"../../api/index\";\n\n// helpers\nimport {\n  showSuccessNotification,\n  showErrorNotification,\n} from \"../../helpers/notifications\";\n\nfunction* getContacts({ payload: filters }: any) {\n  try {\n    const response: Promise<any> = yield call(getContactsApi, filters);\n    yield put(\n      contactsApiResponseSuccess(ContactsActionTypes.GET_CONTACTS, response)\n    );\n  } catch (error: any) {\n    yield put(\n      contactsApiResponseError(ContactsActionTypes.GET_CONTACTS, error)\n    );\n  }\n}\n\nfunction* inviteContact({ payload: newPassword }: any) {\n  try {\n    const response: Promise<any> = yield call(inviteContactApi, newPassword);\n    yield put(\n      contactsApiResponseSuccess(ContactsActionTypes.INVITE_CONTACT, response)\n    );\n    yield call(showSuccessNotification, response + \"\");\n  } catch (error: any) {\n    yield call(showErrorNotification, error);\n    yield put(\n      contactsApiResponseError(ContactsActionTypes.INVITE_CONTACT, error)\n    );\n  }\n}\n\nexport function* watchGetContacts() {\n  yield takeEvery(ContactsActionTypes.GET_CONTACTS, getContacts);\n}\n\nexport function* watchInviteContact() {\n  yield takeEvery(ContactsActionTypes.INVITE_CONTACT, inviteContact);\n}\n\nfunction* contactsSaga() {\n  yield all([fork(watchGetContacts), fork(watchInviteContact)]);\n}\n\nexport default contactsSaga;\n"]},"metadata":{},"sourceType":"module"}