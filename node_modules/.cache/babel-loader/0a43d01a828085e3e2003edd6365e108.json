{"ast":null,"code":"import { takeEvery, fork, put, all, call } from \"redux-saga/effects\"; // Login Redux States\n\nimport { SettingsActionTypes } from \"./types\";\nimport { settingsApiResponseSuccess, settingsApiResponseError } from \"./actions\";\nimport { getSettings as getSettingsApi, updateSettings as updateSettingsApi } from \"../../api/index\";\n\nfunction* getSettings() {\n  try {\n    const response = yield call(getSettingsApi);\n    yield put(settingsApiResponseSuccess(SettingsActionTypes.GET_USER_SETTINGS, response));\n  } catch (error) {\n    yield put(settingsApiResponseError(SettingsActionTypes.GET_USER_SETTINGS, error));\n  }\n}\n\nfunction* updateSettings(_ref) {\n  let {\n    payload: {\n      field,\n      value\n    }\n  } = _ref;\n\n  try {\n    const response = yield call(updateSettingsApi, field, value);\n    yield put(settingsApiResponseSuccess(SettingsActionTypes.UPDATE_USER_SETTINGS, response));\n  } catch (error) {\n    yield put(settingsApiResponseError(SettingsActionTypes.UPDATE_USER_SETTINGS, error));\n  }\n}\n\nexport function* watchGetSettings() {\n  yield takeEvery(SettingsActionTypes.GET_USER_SETTINGS, getSettings);\n}\nexport function* watchUpdateSettings() {\n  yield takeEvery(SettingsActionTypes.UPDATE_USER_SETTINGS, updateSettings);\n}\n\nfunction* settingsSaga() {\n  yield all([fork(watchGetSettings), fork(watchUpdateSettings)]);\n}\n\nexport default settingsSaga;","map":{"version":3,"sources":["/Users/huy8bit/Desktop/DRIVE/JOB/webchatFE/src/redux/settings/saga.ts"],"names":["takeEvery","fork","put","all","call","SettingsActionTypes","settingsApiResponseSuccess","settingsApiResponseError","getSettings","getSettingsApi","updateSettings","updateSettingsApi","response","GET_USER_SETTINGS","error","payload","field","value","UPDATE_USER_SETTINGS","watchGetSettings","watchUpdateSettings","settingsSaga"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,IAApB,EAA0BC,GAA1B,EAA+BC,GAA/B,EAAoCC,IAApC,QAAgD,oBAAhD,C,CAEA;;AACA,SAASC,mBAAT,QAAoC,SAApC;AACA,SACEC,0BADF,EAEEC,wBAFF,QAGO,WAHP;AAKA,SACEC,WAAW,IAAIC,cADjB,EAEEC,cAAc,IAAIC,iBAFpB,QAGO,iBAHP;;AAKA,UAAUH,WAAV,GAAwB;AACtB,MAAI;AACF,UAAMI,QAAsB,GAAG,MAAMR,IAAI,CAACK,cAAD,CAAzC;AACA,UAAMP,GAAG,CACPI,0BAA0B,CACxBD,mBAAmB,CAACQ,iBADI,EAExBD,QAFwB,CADnB,CAAT;AAMD,GARD,CAQE,OAAOE,KAAP,EAAmB;AACnB,UAAMZ,GAAG,CACPK,wBAAwB,CAACF,mBAAmB,CAACQ,iBAArB,EAAwCC,KAAxC,CADjB,CAAT;AAGD;AACF;;AAED,UAAUJ,cAAV,OAA6D;AAAA,MAApC;AAAEK,IAAAA,OAAO,EAAE;AAAEC,MAAAA,KAAF;AAASC,MAAAA;AAAT;AAAX,GAAoC;;AAC3D,MAAI;AACF,UAAML,QAAsB,GAAG,MAAMR,IAAI,CAACO,iBAAD,EAAoBK,KAApB,EAA2BC,KAA3B,CAAzC;AACA,UAAMf,GAAG,CACPI,0BAA0B,CACxBD,mBAAmB,CAACa,oBADI,EAExBN,QAFwB,CADnB,CAAT;AAMD,GARD,CAQE,OAAOE,KAAP,EAAmB;AACnB,UAAMZ,GAAG,CACPK,wBAAwB,CAACF,mBAAmB,CAACa,oBAArB,EAA2CJ,KAA3C,CADjB,CAAT;AAGD;AACF;;AAED,OAAO,UAAUK,gBAAV,GAA6B;AAClC,QAAMnB,SAAS,CAACK,mBAAmB,CAACQ,iBAArB,EAAwCL,WAAxC,CAAf;AACD;AACD,OAAO,UAAUY,mBAAV,GAAgC;AACrC,QAAMpB,SAAS,CAACK,mBAAmB,CAACa,oBAArB,EAA2CR,cAA3C,CAAf;AACD;;AAED,UAAUW,YAAV,GAAyB;AACvB,QAAMlB,GAAG,CAAC,CAACF,IAAI,CAACkB,gBAAD,CAAL,EAAyBlB,IAAI,CAACmB,mBAAD,CAA7B,CAAD,CAAT;AACD;;AAED,eAAeC,YAAf","sourcesContent":["import { takeEvery, fork, put, all, call } from \"redux-saga/effects\";\n\n// Login Redux States\nimport { SettingsActionTypes } from \"./types\";\nimport {\n  settingsApiResponseSuccess,\n  settingsApiResponseError,\n} from \"./actions\";\n\nimport {\n  getSettings as getSettingsApi,\n  updateSettings as updateSettingsApi,\n} from \"../../api/index\";\n\nfunction* getSettings() {\n  try {\n    const response: Promise<any> = yield call(getSettingsApi);\n    yield put(\n      settingsApiResponseSuccess(\n        SettingsActionTypes.GET_USER_SETTINGS,\n        response\n      )\n    );\n  } catch (error: any) {\n    yield put(\n      settingsApiResponseError(SettingsActionTypes.GET_USER_SETTINGS, error)\n    );\n  }\n}\n\nfunction* updateSettings({ payload: { field, value } }: any) {\n  try {\n    const response: Promise<any> = yield call(updateSettingsApi, field, value);\n    yield put(\n      settingsApiResponseSuccess(\n        SettingsActionTypes.UPDATE_USER_SETTINGS,\n        response\n      )\n    );\n  } catch (error: any) {\n    yield put(\n      settingsApiResponseError(SettingsActionTypes.UPDATE_USER_SETTINGS, error)\n    );\n  }\n}\n\nexport function* watchGetSettings() {\n  yield takeEvery(SettingsActionTypes.GET_USER_SETTINGS, getSettings);\n}\nexport function* watchUpdateSettings() {\n  yield takeEvery(SettingsActionTypes.UPDATE_USER_SETTINGS, updateSettings);\n}\n\nfunction* settingsSaga() {\n  yield all([fork(watchGetSettings), fork(watchUpdateSettings)]);\n}\n\nexport default settingsSaga;\n"]},"metadata":{},"sourceType":"module"}