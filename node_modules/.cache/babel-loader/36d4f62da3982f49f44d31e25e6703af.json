{"ast":null,"code":"import { takeEvery, fork, put, all, call } from \"redux-saga/effects\"; // Login Redux States\n\nimport { AuthForgetPassActionTypes } from \"./types\";\nimport { authForgetPassApiResponseSuccess, authForgetPassApiResponseError } from \"./actions\"; //Include Both Helper File with needed methods\n\nimport { getFirebaseBackend } from \"../../../helpers/firebase_helper\";\nimport { postFakeForgetPwd, postJwtForgetPwd, changePassword as changePasswordApi } from \"../../../api/index\";\nconst fireBaseBackend = getFirebaseBackend(); //If user is send successfully send mail link then dispatch redux action's are directly from here.\n\nfunction* forgetUser(_ref) {\n  let {\n    payload: user\n  } = _ref;\n\n  try {\n    if (process.env.REACT_APP_DEFAULTAUTH === \"firebase\") {\n      yield call(fireBaseBackend.forgetPassword, user.email);\n      yield put(authForgetPassApiResponseSuccess(AuthForgetPassActionTypes.FORGET_PASSWORD, \"Reset link are sended to your mailbox, check there first\"));\n    } else if (process.env.REACT_APP_DEFAULTAUTH === \"jwt\") {\n      yield call(postJwtForgetPwd, {\n        email: user.email\n      });\n      yield put(authForgetPassApiResponseSuccess(AuthForgetPassActionTypes.FORGET_PASSWORD, \"Reset link are sended to your mailbox, check there first\"));\n    } else {\n      yield call(postFakeForgetPwd, {\n        email: user.email\n      });\n      yield put(authForgetPassApiResponseSuccess(AuthForgetPassActionTypes.FORGET_PASSWORD, \"Reset link are sended to your mailbox, check there first\"));\n    }\n  } catch (error) {\n    yield put(authForgetPassApiResponseError(AuthForgetPassActionTypes.FORGET_PASSWORD, error));\n  }\n}\n\nfunction* changePassword(_ref2) {\n  let {\n    payload: newPassword\n  } = _ref2;\n\n  try {\n    yield call(changePasswordApi, newPassword);\n    yield put(authForgetPassApiResponseSuccess(AuthForgetPassActionTypes.CHANGE_PASSWORD, \"Your Password is Changed\"));\n  } catch (error) {\n    yield put(authForgetPassApiResponseError(AuthForgetPassActionTypes.CHANGE_PASSWORD, error));\n  }\n}\n\nexport function* watchUserPasswordForget() {\n  yield takeEvery(AuthForgetPassActionTypes.FORGET_PASSWORD, forgetUser);\n}\nexport function* watchUserChangePassword() {\n  yield takeEvery(AuthForgetPassActionTypes.CHANGE_PASSWORD, changePassword);\n}\n\nfunction* forgetPasswordSaga() {\n  yield all([fork(watchUserPasswordForget), fork(watchUserChangePassword)]);\n}\n\nexport default forgetPasswordSaga;","map":{"version":3,"sources":["/Users/huy8bit/Desktop/DRIVE/JOB/webchatFE/src/redux/auth/forgetpwd/saga.ts"],"names":["takeEvery","fork","put","all","call","AuthForgetPassActionTypes","authForgetPassApiResponseSuccess","authForgetPassApiResponseError","getFirebaseBackend","postFakeForgetPwd","postJwtForgetPwd","changePassword","changePasswordApi","fireBaseBackend","forgetUser","payload","user","process","env","REACT_APP_DEFAULTAUTH","forgetPassword","email","FORGET_PASSWORD","error","newPassword","CHANGE_PASSWORD","watchUserPasswordForget","watchUserChangePassword","forgetPasswordSaga"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,IAApB,EAA0BC,GAA1B,EAA+BC,GAA/B,EAAoCC,IAApC,QAAgD,oBAAhD,C,CAEA;;AACA,SAASC,yBAAT,QAA0C,SAA1C;AACA,SACEC,gCADF,EAEEC,8BAFF,QAGO,WAHP,C,CAKA;;AACA,SAASC,kBAAT,QAAmC,kCAAnC;AAEA,SACEC,iBADF,EAEEC,gBAFF,EAGEC,cAAc,IAAIC,iBAHpB,QAIO,oBAJP;AAMA,MAAMC,eAAoB,GAAGL,kBAAkB,EAA/C,C,CAEA;;AACA,UAAUM,UAAV,OAA6C;AAAA,MAAxB;AAAEC,IAAAA,OAAO,EAAEC;AAAX,GAAwB;;AAC3C,MAAI;AACF,QAAIC,OAAO,CAACC,GAAR,CAAYC,qBAAZ,KAAsC,UAA1C,EAAsD;AACpD,YAAMf,IAAI,CAACS,eAAe,CAACO,cAAjB,EAAiCJ,IAAI,CAACK,KAAtC,CAAV;AACA,YAAMnB,GAAG,CACPI,gCAAgC,CAC9BD,yBAAyB,CAACiB,eADI,EAE9B,0DAF8B,CADzB,CAAT;AAMD,KARD,MAQO,IAAIL,OAAO,CAACC,GAAR,CAAYC,qBAAZ,KAAsC,KAA1C,EAAiD;AACtD,YAAMf,IAAI,CAACM,gBAAD,EAAmB;AAC3BW,QAAAA,KAAK,EAAEL,IAAI,CAACK;AADe,OAAnB,CAAV;AAGA,YAAMnB,GAAG,CACPI,gCAAgC,CAC9BD,yBAAyB,CAACiB,eADI,EAE9B,0DAF8B,CADzB,CAAT;AAMD,KAVM,MAUA;AACL,YAAMlB,IAAI,CAACK,iBAAD,EAAoB;AAC5BY,QAAAA,KAAK,EAAEL,IAAI,CAACK;AADgB,OAApB,CAAV;AAGA,YAAMnB,GAAG,CACPI,gCAAgC,CAC9BD,yBAAyB,CAACiB,eADI,EAE9B,0DAF8B,CADzB,CAAT;AAMD;AACF,GA9BD,CA8BE,OAAOC,KAAP,EAAmB;AACnB,UAAMrB,GAAG,CACPK,8BAA8B,CAC5BF,yBAAyB,CAACiB,eADE,EAE5BC,KAF4B,CADvB,CAAT;AAMD;AACF;;AAED,UAAUZ,cAAV,QAAwD;AAAA,MAA/B;AAAEI,IAAAA,OAAO,EAAES;AAAX,GAA+B;;AACtD,MAAI;AACF,UAAMpB,IAAI,CAACQ,iBAAD,EAAoBY,WAApB,CAAV;AACA,UAAMtB,GAAG,CACPI,gCAAgC,CAC9BD,yBAAyB,CAACoB,eADI,EAE9B,0BAF8B,CADzB,CAAT;AAMD,GARD,CAQE,OAAOF,KAAP,EAAmB;AACnB,UAAMrB,GAAG,CACPK,8BAA8B,CAC5BF,yBAAyB,CAACoB,eADE,EAE5BF,KAF4B,CADvB,CAAT;AAMD;AACF;;AAED,OAAO,UAAUG,uBAAV,GAAoC;AACzC,QAAM1B,SAAS,CAACK,yBAAyB,CAACiB,eAA3B,EAA4CR,UAA5C,CAAf;AACD;AAED,OAAO,UAAUa,uBAAV,GAAoC;AACzC,QAAM3B,SAAS,CAACK,yBAAyB,CAACoB,eAA3B,EAA4Cd,cAA5C,CAAf;AACD;;AAED,UAAUiB,kBAAV,GAA+B;AAC7B,QAAMzB,GAAG,CAAC,CAACF,IAAI,CAACyB,uBAAD,CAAL,EAAgCzB,IAAI,CAAC0B,uBAAD,CAApC,CAAD,CAAT;AACD;;AAED,eAAeC,kBAAf","sourcesContent":["import { takeEvery, fork, put, all, call } from \"redux-saga/effects\";\n\n// Login Redux States\nimport { AuthForgetPassActionTypes } from \"./types\";\nimport {\n  authForgetPassApiResponseSuccess,\n  authForgetPassApiResponseError,\n} from \"./actions\";\n\n//Include Both Helper File with needed methods\nimport { getFirebaseBackend } from \"../../../helpers/firebase_helper\";\n\nimport {\n  postFakeForgetPwd,\n  postJwtForgetPwd,\n  changePassword as changePasswordApi,\n} from \"../../../api/index\";\n\nconst fireBaseBackend: any = getFirebaseBackend();\n\n//If user is send successfully send mail link then dispatch redux action's are directly from here.\nfunction* forgetUser({ payload: user }: any) {\n  try {\n    if (process.env.REACT_APP_DEFAULTAUTH === \"firebase\") {\n      yield call(fireBaseBackend.forgetPassword, user.email);\n      yield put(\n        authForgetPassApiResponseSuccess(\n          AuthForgetPassActionTypes.FORGET_PASSWORD,\n          \"Reset link are sended to your mailbox, check there first\"\n        )\n      );\n    } else if (process.env.REACT_APP_DEFAULTAUTH === \"jwt\") {\n      yield call(postJwtForgetPwd, {\n        email: user.email,\n      });\n      yield put(\n        authForgetPassApiResponseSuccess(\n          AuthForgetPassActionTypes.FORGET_PASSWORD,\n          \"Reset link are sended to your mailbox, check there first\"\n        )\n      );\n    } else {\n      yield call(postFakeForgetPwd, {\n        email: user.email,\n      });\n      yield put(\n        authForgetPassApiResponseSuccess(\n          AuthForgetPassActionTypes.FORGET_PASSWORD,\n          \"Reset link are sended to your mailbox, check there first\"\n        )\n      );\n    }\n  } catch (error: any) {\n    yield put(\n      authForgetPassApiResponseError(\n        AuthForgetPassActionTypes.FORGET_PASSWORD,\n        error\n      )\n    );\n  }\n}\n\nfunction* changePassword({ payload: newPassword }: any) {\n  try {\n    yield call(changePasswordApi, newPassword);\n    yield put(\n      authForgetPassApiResponseSuccess(\n        AuthForgetPassActionTypes.CHANGE_PASSWORD,\n        \"Your Password is Changed\"\n      )\n    );\n  } catch (error: any) {\n    yield put(\n      authForgetPassApiResponseError(\n        AuthForgetPassActionTypes.CHANGE_PASSWORD,\n        error\n      )\n    );\n  }\n}\n\nexport function* watchUserPasswordForget() {\n  yield takeEvery(AuthForgetPassActionTypes.FORGET_PASSWORD, forgetUser);\n}\n\nexport function* watchUserChangePassword() {\n  yield takeEvery(AuthForgetPassActionTypes.CHANGE_PASSWORD, changePassword);\n}\n\nfunction* forgetPasswordSaga() {\n  yield all([fork(watchUserPasswordForget), fork(watchUserChangePassword)]);\n}\n\nexport default forgetPasswordSaga;\n"]},"metadata":{},"sourceType":"module"}