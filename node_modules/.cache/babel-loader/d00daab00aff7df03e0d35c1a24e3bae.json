{"ast":null,"code":"import { takeEvery, fork, put, all, call } from \"redux-saga/effects\"; //Account Redux states\n\nimport { AuthRegisterActionTypes } from \"./types\";\nimport { authRegisterApiResponseSuccess, authRegisterApiResponseError } from \"./actions\"; //Include Both Helper File with needed methods\n\nimport { getFirebaseBackend } from \"../../../helpers/firebase_helper\";\nimport { postFakeRegister, postJwtRegister } from \"../../../api/index\"; // initialize relavant method of both Auth\n\nconst fireBaseBackend = getFirebaseBackend(); // Is user register successfull then direct plot user in redux.\n\nfunction* registerUser(_ref) {\n  let {\n    payload: {\n      user\n    }\n  } = _ref;\n\n  try {\n    if (process.env.REACT_APP_DEFAULTAUTH === \"firebase\") {\n      const response = yield call(fireBaseBackend.registerUser, user.email, user.password);\n      yield put(authRegisterApiResponseSuccess(AuthRegisterActionTypes.REGISTER_USER, response));\n    } else if (process.env.REACT_APP_DEFAULTAUTH === \"jwt\") {\n      const response = yield call(postJwtRegister, user);\n      yield put(authRegisterApiResponseSuccess(AuthRegisterActionTypes.REGISTER_USER, response));\n    } else if (process.env.REACT_APP_DEFAULTAUTH === \"fake\") {\n      const response = yield call(postFakeRegister, user);\n      yield put(authRegisterApiResponseSuccess(AuthRegisterActionTypes.REGISTER_USER, response));\n    }\n  } catch (error) {\n    yield put(authRegisterApiResponseError(AuthRegisterActionTypes.REGISTER_USER, error));\n  }\n}\n\nexport function* watchUserRegister() {\n  yield takeEvery(AuthRegisterActionTypes.REGISTER_USER, registerUser);\n}\n\nfunction* registerSaga() {\n  yield all([fork(watchUserRegister)]);\n}\n\nexport default registerSaga;","map":{"version":3,"sources":["/Users/huy8bit/Desktop/DRIVE/JOB/webchatFE/src/redux/auth/register/saga.ts"],"names":["takeEvery","fork","put","all","call","AuthRegisterActionTypes","authRegisterApiResponseSuccess","authRegisterApiResponseError","getFirebaseBackend","postFakeRegister","postJwtRegister","fireBaseBackend","registerUser","payload","user","process","env","REACT_APP_DEFAULTAUTH","response","email","password","REGISTER_USER","error","watchUserRegister","registerSaga"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,IAApB,EAA0BC,GAA1B,EAA+BC,GAA/B,EAAoCC,IAApC,QAAgD,oBAAhD,C,CAEA;;AACA,SAASC,uBAAT,QAAwC,SAAxC;AACA,SACEC,8BADF,EAEEC,4BAFF,QAGO,WAHP,C,CAKA;;AACA,SAASC,kBAAT,QAAmC,kCAAnC;AACA,SAASC,gBAAT,EAA2BC,eAA3B,QAAkD,oBAAlD,C,CAEA;;AACA,MAAMC,eAAe,GAAGH,kBAAkB,EAA1C,C,CAEA;;AACA,UAAUI,YAAV,OAAmD;AAAA,MAA5B;AAAEC,IAAAA,OAAO,EAAE;AAAEC,MAAAA;AAAF;AAAX,GAA4B;;AACjD,MAAI;AACF,QAAIC,OAAO,CAACC,GAAR,CAAYC,qBAAZ,KAAsC,UAA1C,EAAsD;AACpD,YAAMC,QAAsB,GAAG,MAAMd,IAAI,CACvCO,eAAe,CAACC,YADuB,EAEvCE,IAAI,CAACK,KAFkC,EAGvCL,IAAI,CAACM,QAHkC,CAAzC;AAKA,YAAMlB,GAAG,CACPI,8BAA8B,CAC5BD,uBAAuB,CAACgB,aADI,EAE5BH,QAF4B,CADvB,CAAT;AAMD,KAZD,MAYO,IAAIH,OAAO,CAACC,GAAR,CAAYC,qBAAZ,KAAsC,KAA1C,EAAiD;AACtD,YAAMC,QAAsB,GAAG,MAAMd,IAAI,CAACM,eAAD,EAAkBI,IAAlB,CAAzC;AACA,YAAMZ,GAAG,CACPI,8BAA8B,CAC5BD,uBAAuB,CAACgB,aADI,EAE5BH,QAF4B,CADvB,CAAT;AAMD,KARM,MAQA,IAAIH,OAAO,CAACC,GAAR,CAAYC,qBAAZ,KAAsC,MAA1C,EAAkD;AACvD,YAAMC,QAAsB,GAAG,MAAMd,IAAI,CAACK,gBAAD,EAAmBK,IAAnB,CAAzC;AACA,YAAMZ,GAAG,CACPI,8BAA8B,CAC5BD,uBAAuB,CAACgB,aADI,EAE5BH,QAF4B,CADvB,CAAT;AAMD;AACF,GA9BD,CA8BE,OAAOI,KAAP,EAAmB;AACnB,UAAMpB,GAAG,CACPK,4BAA4B,CAACF,uBAAuB,CAACgB,aAAzB,EAAwCC,KAAxC,CADrB,CAAT;AAGD;AACF;;AAED,OAAO,UAAUC,iBAAV,GAA8B;AACnC,QAAMvB,SAAS,CAACK,uBAAuB,CAACgB,aAAzB,EAAwCT,YAAxC,CAAf;AACD;;AAED,UAAUY,YAAV,GAAyB;AACvB,QAAMrB,GAAG,CAAC,CAACF,IAAI,CAACsB,iBAAD,CAAL,CAAD,CAAT;AACD;;AAED,eAAeC,YAAf","sourcesContent":["import { takeEvery, fork, put, all, call } from \"redux-saga/effects\";\n\n//Account Redux states\nimport { AuthRegisterActionTypes } from \"./types\";\nimport {\n  authRegisterApiResponseSuccess,\n  authRegisterApiResponseError,\n} from \"./actions\";\n\n//Include Both Helper File with needed methods\nimport { getFirebaseBackend } from \"../../../helpers/firebase_helper\";\nimport { postFakeRegister, postJwtRegister } from \"../../../api/index\";\n\n// initialize relavant method of both Auth\nconst fireBaseBackend = getFirebaseBackend();\n\n// Is user register successfull then direct plot user in redux.\nfunction* registerUser({ payload: { user } }: any) {\n  try {\n    if (process.env.REACT_APP_DEFAULTAUTH === \"firebase\") {\n      const response: Promise<any> = yield call(\n        fireBaseBackend.registerUser,\n        user.email,\n        user.password\n      );\n      yield put(\n        authRegisterApiResponseSuccess(\n          AuthRegisterActionTypes.REGISTER_USER,\n          response\n        )\n      );\n    } else if (process.env.REACT_APP_DEFAULTAUTH === \"jwt\") {\n      const response: Promise<any> = yield call(postJwtRegister, user);\n      yield put(\n        authRegisterApiResponseSuccess(\n          AuthRegisterActionTypes.REGISTER_USER,\n          response\n        )\n      );\n    } else if (process.env.REACT_APP_DEFAULTAUTH === \"fake\") {\n      const response: Promise<any> = yield call(postFakeRegister, user);\n      yield put(\n        authRegisterApiResponseSuccess(\n          AuthRegisterActionTypes.REGISTER_USER,\n          response\n        )\n      );\n    }\n  } catch (error: any) {\n    yield put(\n      authRegisterApiResponseError(AuthRegisterActionTypes.REGISTER_USER, error)\n    );\n  }\n}\n\nexport function* watchUserRegister() {\n  yield takeEvery(AuthRegisterActionTypes.REGISTER_USER, registerUser);\n}\n\nfunction* registerSaga() {\n  yield all([fork(watchUserRegister)]);\n}\n\nexport default registerSaga;\n"]},"metadata":{},"sourceType":"module"}