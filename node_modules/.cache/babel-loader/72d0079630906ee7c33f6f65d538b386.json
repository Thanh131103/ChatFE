{"ast":null,"code":"import firebase from \"firebase/app\"; // Add the Firebase products that you want to use\n\nimport \"firebase/auth\";\nimport \"firebase/firestore\";\n\nclass FirebaseAuthBackend {\n  constructor(firebaseConfig) {\n    this.registerUser = (email, password) => {\n      return new Promise((resolve, reject) => {\n        firebase.auth().createUserWithEmailAndPassword(email, password).then(user => {\n          resolve(firebase.auth().currentUser);\n        }, error => {\n          reject(this._handleError(error));\n        });\n      });\n    };\n\n    this.editProfileAPI = (email, password) => {\n      return new Promise((resolve, reject) => {\n        firebase.auth().createUserWithEmailAndPassword(email, password).then(user => {\n          resolve(firebase.auth().currentUser);\n        }, error => {\n          reject(this._handleError(error));\n        });\n      });\n    };\n\n    this.loginUser = (email, password) => {\n      return new Promise((resolve, reject) => {\n        firebase.auth().signInWithEmailAndPassword(email, password).then(user => {\n          const currentUser = JSON.stringify(firebase.auth().currentUser);\n          resolve(currentUser);\n        }, error => {\n          reject(this._handleError(error));\n        });\n      });\n    };\n\n    this.forgetPassword = email => {\n      return new Promise((resolve, reject) => {\n        firebase.auth().sendPasswordResetEmail(email, {\n          url: window.location.protocol + \"//\" + window.location.host + \"/login\"\n        }).then(() => {\n          resolve(true);\n        }).catch(error => {\n          reject(this._handleError(error));\n        });\n      });\n    };\n\n    this.logout = () => {\n      return new Promise((resolve, reject) => {\n        firebase.auth().signOut().then(() => {\n          resolve(true);\n        }).catch(error => {\n          reject(this._handleError(error));\n        });\n      });\n    };\n\n    this.socialLoginUser = (data, type) => {\n      let credential = {};\n\n      if (type === \"google\") {\n        credential = firebase.auth.GoogleAuthProvider.credential(data.idToken, data.token);\n      } else if (type === \"facebook\") {\n        credential = firebase.auth.FacebookAuthProvider.credential(data.token);\n      }\n\n      return new Promise((resolve, reject) => {\n        if (!!credential) {\n          firebase.auth().signInWithCredential(credential).then(user => {\n            let userL = this.addNewUserToFirestore(user);\n            userL = JSON.stringify(userL);\n            resolve(userL);\n          }).catch(error => {\n            reject(this._handleError(error));\n          });\n        } else {// reject(this._handleError(error));\n        }\n      });\n    };\n\n    this.addNewUserToFirestore = user => {\n      const collection = firebase.firestore().collection(\"users\");\n      const {\n        profile\n      } = user.additionalUserInfo;\n      const details = {\n        firstName: profile.given_name ? profile.given_name : profile.first_name,\n        lastName: profile.family_name ? profile.family_name : profile.last_name,\n        fullName: profile.name,\n        email: profile.email,\n        picture: profile.picture,\n        createdDtm: firebase.firestore.FieldValue.serverTimestamp(),\n        lastLoginTime: firebase.firestore.FieldValue.serverTimestamp()\n      };\n      collection.doc(firebase.auth().currentUser.uid).set(details);\n      return {\n        user,\n        details\n      };\n    };\n\n    this.getAuthenticatedUser = () => {\n      if (!localStorage.getItem(\"authUser\")) return null;\n      return JSON.parse(localStorage.getItem(\"authUser\"));\n    };\n\n    if (firebaseConfig) {\n      // Initialize Firebase\n      firebase.initializeApp(firebaseConfig);\n      firebase.auth().onAuthStateChanged(user => {\n        if (user) {\n          setLoggeedInUser(user);\n        } else {\n          localStorage.removeItem(\"authUser\");\n        }\n      });\n    }\n  }\n  /**\r\n   * Registers the user with given details\r\n   */\n\n\n  /**\r\n   * Handle the error\r\n   * @param {*} error\r\n   */\n  _handleError(error) {\n    // var errorCode = error.code;\n    var errorMessage = error.message;\n    return errorMessage;\n  }\n\n}\n\nlet _fireBaseBackend = null;\n\nconst setLoggeedInUser = user => {\n  localStorage.setItem(\"authUser\", JSON.stringify(user));\n};\n/**\r\n * Initilize the backend\r\n * @param {*} config\r\n */\n\n\nconst initFirebaseBackend = config => {\n  if (!_fireBaseBackend) {\n    _fireBaseBackend = new FirebaseAuthBackend(config);\n  }\n\n  return _fireBaseBackend;\n};\n/**\r\n * Returns the firebase backend\r\n */\n\n\nconst getFirebaseBackend = () => {\n  return _fireBaseBackend;\n};\n\nexport { initFirebaseBackend, getFirebaseBackend, setLoggeedInUser };","map":{"version":3,"sources":["/Users/huy8bit/Desktop/DRIVE/JOB/webchatFE/src/helpers/firebase_helper.js"],"names":["firebase","FirebaseAuthBackend","constructor","firebaseConfig","registerUser","email","password","Promise","resolve","reject","auth","createUserWithEmailAndPassword","then","user","currentUser","error","_handleError","editProfileAPI","loginUser","signInWithEmailAndPassword","JSON","stringify","forgetPassword","sendPasswordResetEmail","url","window","location","protocol","host","catch","logout","signOut","socialLoginUser","data","type","credential","GoogleAuthProvider","idToken","token","FacebookAuthProvider","signInWithCredential","userL","addNewUserToFirestore","collection","firestore","profile","additionalUserInfo","details","firstName","given_name","first_name","lastName","family_name","last_name","fullName","name","picture","createdDtm","FieldValue","serverTimestamp","lastLoginTime","doc","uid","set","getAuthenticatedUser","localStorage","getItem","parse","initializeApp","onAuthStateChanged","setLoggeedInUser","removeItem","errorMessage","message","_fireBaseBackend","setItem","initFirebaseBackend","config","getFirebaseBackend"],"mappings":"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","sourcesContent":["import firebase from \"firebase/app\";\r\n\r\n// Add the Firebase products that you want to use\r\nimport \"firebase/auth\";\r\nimport \"firebase/firestore\";\r\n\r\nclass FirebaseAuthBackend {\r\n  constructor(firebaseConfig) {\r\n    if (firebaseConfig) {\r\n      // Initialize Firebase\r\n      firebase.initializeApp(firebaseConfig);\r\n      firebase.auth().onAuthStateChanged(user => {\r\n        if (user) {\r\n          setLoggeedInUser(user);\r\n        } else {\r\n          localStorage.removeItem(\"authUser\");\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Registers the user with given details\r\n   */\r\n  registerUser = (email, password) => {\r\n    return new Promise((resolve, reject) => {\r\n      firebase\r\n        .auth()\r\n        .createUserWithEmailAndPassword(email, password)\r\n        .then(\r\n          user => {\r\n            resolve(firebase.auth().currentUser);\r\n          },\r\n          error => {\r\n            reject(this._handleError(error));\r\n          }\r\n        );\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Registers the user with given details\r\n   */\r\n  editProfileAPI = (email, password) => {\r\n    return new Promise((resolve, reject) => {\r\n      firebase\r\n        .auth()\r\n        .createUserWithEmailAndPassword(email, password)\r\n        .then(\r\n          user => {\r\n            resolve(firebase.auth().currentUser);\r\n          },\r\n          error => {\r\n            reject(this._handleError(error));\r\n          }\r\n        );\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Login user with given details\r\n   */\r\n  loginUser = (email, password) => {\r\n    return new Promise((resolve, reject) => {\r\n      firebase\r\n        .auth()\r\n        .signInWithEmailAndPassword(email, password)\r\n        .then(\r\n          user => {\r\n            const currentUser = JSON.stringify(firebase.auth().currentUser);\r\n            resolve(currentUser);\r\n          },\r\n          error => {\r\n            reject(this._handleError(error));\r\n          }\r\n        );\r\n    });\r\n  };\r\n\r\n  /**\r\n   * forget Password user with given details\r\n   */\r\n  forgetPassword = email => {\r\n    return new Promise((resolve, reject) => {\r\n      firebase\r\n        .auth()\r\n        .sendPasswordResetEmail(email, {\r\n          url:\r\n            window.location.protocol + \"//\" + window.location.host + \"/login\",\r\n        })\r\n        .then(() => {\r\n          resolve(true);\r\n        })\r\n        .catch(error => {\r\n          reject(this._handleError(error));\r\n        });\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Logout the user\r\n   */\r\n  logout = () => {\r\n    return new Promise((resolve, reject) => {\r\n      firebase\r\n        .auth()\r\n        .signOut()\r\n        .then(() => {\r\n          resolve(true);\r\n        })\r\n        .catch(error => {\r\n          reject(this._handleError(error));\r\n        });\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Social Login user with given details\r\n   */\r\n  socialLoginUser = (data, type) => {\r\n    let credential = {};\r\n    if (type === \"google\") {\r\n      credential = firebase.auth.GoogleAuthProvider.credential(\r\n        data.idToken,\r\n        data.token\r\n      );\r\n    } else if (type === \"facebook\") {\r\n      credential = firebase.auth.FacebookAuthProvider.credential(data.token);\r\n    }\r\n    return new Promise((resolve, reject) => {\r\n      if (!!credential) {\r\n        firebase\r\n          .auth()\r\n          .signInWithCredential(credential)\r\n          .then(user => {\r\n            let userL = this.addNewUserToFirestore(user);\r\n            userL = JSON.stringify(userL);\r\n            resolve(userL);\r\n          })\r\n          .catch(error => {\r\n            reject(this._handleError(error));\r\n          });\r\n      } else {\r\n        // reject(this._handleError(error));\r\n      }\r\n    });\r\n  };\r\n\r\n  addNewUserToFirestore = user => {\r\n    const collection = firebase.firestore().collection(\"users\");\r\n    const { profile } = user.additionalUserInfo;\r\n    const details = {\r\n      firstName: profile.given_name ? profile.given_name : profile.first_name,\r\n      lastName: profile.family_name ? profile.family_name : profile.last_name,\r\n      fullName: profile.name,\r\n      email: profile.email,\r\n      picture: profile.picture,\r\n      createdDtm: firebase.firestore.FieldValue.serverTimestamp(),\r\n      lastLoginTime: firebase.firestore.FieldValue.serverTimestamp(),\r\n    };\r\n    collection.doc(firebase.auth().currentUser.uid).set(details);\r\n    return { user, details };\r\n  };\r\n\r\n  /**\r\n   * Returns the authenticated user\r\n   */\r\n  getAuthenticatedUser = () => {\r\n    if (!localStorage.getItem(\"authUser\")) return null;\r\n    return JSON.parse(localStorage.getItem(\"authUser\"));\r\n  };\r\n\r\n  /**\r\n   * Handle the error\r\n   * @param {*} error\r\n   */\r\n  _handleError(error) {\r\n    // var errorCode = error.code;\r\n    var errorMessage = error.message;\r\n    return errorMessage;\r\n  }\r\n}\r\n\r\nlet _fireBaseBackend = null;\r\n\r\nconst setLoggeedInUser = user => {\r\n  localStorage.setItem(\"authUser\", JSON.stringify(user));\r\n};\r\n\r\n/**\r\n * Initilize the backend\r\n * @param {*} config\r\n */\r\nconst initFirebaseBackend = config => {\r\n  if (!_fireBaseBackend) {\r\n    _fireBaseBackend = new FirebaseAuthBackend(config);\r\n  }\r\n  return _fireBaseBackend;\r\n};\r\n\r\n/**\r\n * Returns the firebase backend\r\n */\r\nconst getFirebaseBackend = () => {\r\n  return _fireBaseBackend;\r\n};\r\n\r\nexport { initFirebaseBackend, getFirebaseBackend, setLoggeedInUser };\r\n"]},"metadata":{},"sourceType":"module"}